interactions:
- request:
    body: '{"event_type": "evaluate", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "is_completed": false}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '125'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 25 Mar 2025 08:36:47 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 2b4cbbd85f7c04a22cdd61a36f389bb0.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - qx2cpWBGUk97GsR0zfKAMpypf7yyaf2jbpUgT-NMwboJCffFlhHNUw==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "is_completed": false}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '125'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 25 Mar 2025 08:36:47 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 f41d2271ff7a71d63f0acb6d5ad5aa6a.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - csvA5AJUQhcAalQTOVHoA3qDQDOEILhwmYZPuJZWKf8sFzWxuSGF8w==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704]], "model": "text-embedding-3-large", "encoding_format":
      "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '84'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"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\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        1,\n    \"total_tokens\": 1\n  }\n}\n"
    headers:
      CF-RAY:
      - 925d152698c70bcf-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:48 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=9RuMKhg4qweSJvrgjS7W7ogTPCGJgJ8Bbq2Us4ots_s-1742891808-1.0.1.1-C4gyAEER2XAI7IlOkEhtXCfM1ndNVP2iBC2cUl99kZ7Ngp9di3f0ForIShy01rt.Pwp8qDnwwPc7wrzwDz9a_cH47kv4HvAw0N6hWyQ5EKc;
        path=/; expires=Tue, 25-Mar-25 09:06:48 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=OJkzS0ShpI8FG2pvefMX1Lb5lW19BFxyDpi9pEYVh94-1742891808226-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '123'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-canary-694ccd995f-6kplk
      x-envoy-upstream-service-time:
      - '80'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999999'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_cdd70405be5871543a50ea323200db99
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a question and an answer, analyze the
      complexity of each sentence in the answer. Break down each sentence into one
      or more fully understandable statements. Ensure that no pronouns are used in
      any statement. Format the outputs in JSON.\nPlease return the output in a JSON
      format that complies with the following schema as specified in JSON Schema:\n{\"properties\":
      {\"statements\": {\"description\": \"The generated statements\", \"items\":
      {\"type\": \"string\"}, \"title\": \"Statements\", \"type\": \"array\"}}, \"required\":
      [\"statements\"], \"title\": \"StatementGeneratorOutput\", \"type\": \"object\"}Do
      not use single quotes in your response but double quotes,properly escaped with
      a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    \"question\":
      \"Who was Albert Einstein and what is he best known for?\",\n    \"answer\":
      \"He was a German-born theoretical physicist, widely acknowledged to be one
      of the greatest and most influential physicists of all time. He was best known
      for developing the theory of relativity, he also made important contributions
      to the development of the theory of quantum mechanics.\"\n}\nOutput: {\n    \"statements\":
      [\n        \"Albert Einstein was a German-born theoretical physicist.\",\n        \"Albert
      Einstein is recognized as one of the greatest and most influential physicists
      of all time.\",\n        \"Albert Einstein was best known for developing the
      theory of relativity.\",\n        \"Albert Einstein also made important contributions
      to the development of the theory of quantum mechanics.\"\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"question\": \"What''s
      the capital of France?\",\n    \"answer\": \"The capital of France is Paris.\"\n}\nOutput:
      ", "role": "user"}], "model": "gpt-4o", "n": 1, "stream": false, "temperature":
      1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '1904'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEu47Ld4GeSlZffrPWpSMWZXUmH4G\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742891807,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        \\\"Paris is the capital of France.\\\"\\n    ]\\n}\\n```\",\n
        \       \"refusal\": null,\n        \"annotations\": []\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        357,\n    \"completion_tokens\": 24,\n    \"total_tokens\": 381,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_90d33c15d4\"\n}\n"
    headers:
      CF-RAY:
      - 925d1526abb8d0f2-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:48 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=Ip66UlvOYO5rwipSJy72O3AwkbOMm5kLeQqWfSdb5vA-1742891808-1.0.1.1-X6.YDAltYtb6iRkgjYMhPMGel47TR47qEAGfp_w3FPGwpInPAdZd2yxvj58HRbyzWrJfYjWXzQ4neAKPiOUuFX3kaNueR1PZ_xc6FpACjME;
        path=/; expires=Tue, 25-Mar-25 09:06:48 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=AE.lqxlRgUS1TjKECKfYGsPDlKtQZEopLF4NCus0_Lc-1742891808246-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '897'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '286'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999570'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_f968c4c4faf0b0fc017ab3633d86b442
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a question and an answer, analyze the
      complexity of each sentence in the answer. Break down each sentence into one
      or more fully understandable statements. Ensure that no pronouns are used in
      any statement. Format the outputs in JSON.\nPlease return the output in a JSON
      format that complies with the following schema as specified in JSON Schema:\n{\"properties\":
      {\"statements\": {\"description\": \"The generated statements\", \"items\":
      {\"type\": \"string\"}, \"title\": \"Statements\", \"type\": \"array\"}}, \"required\":
      [\"statements\"], \"title\": \"StatementGeneratorOutput\", \"type\": \"object\"}Do
      not use single quotes in your response but double quotes,properly escaped with
      a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    \"question\":
      \"Who was Albert Einstein and what is he best known for?\",\n    \"answer\":
      \"He was a German-born theoretical physicist, widely acknowledged to be one
      of the greatest and most influential physicists of all time. He was best known
      for developing the theory of relativity, he also made important contributions
      to the development of the theory of quantum mechanics.\"\n}\nOutput: {\n    \"statements\":
      [\n        \"Albert Einstein was a German-born theoretical physicist.\",\n        \"Albert
      Einstein is recognized as one of the greatest and most influential physicists
      of all time.\",\n        \"Albert Einstein was best known for developing the
      theory of relativity.\",\n        \"Albert Einstein also made important contributions
      to the development of the theory of quantum mechanics.\"\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"question\": \"What''s
      the capital of France?\",\n    \"answer\": \"The capital of France is Paris.\"\n}\nOutput:
      ", "role": "user"}], "model": "gpt-4o", "n": 1, "stream": false, "temperature":
      1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '1904'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEu47RUHIpzF6NZbFvTDZKtSpMoOJ\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742891807,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        \\\"Paris is the capital of France.\\\"\\n    ]\\n}\\n```\",\n
        \       \"refusal\": null,\n        \"annotations\": []\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        357,\n    \"completion_tokens\": 24,\n    \"total_tokens\": 381,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_90d33c15d4\"\n}\n"
    headers:
      CF-RAY:
      - 925d1526afa2d0f4-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:48 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=pRHN2EkfVwTyGK3O5.mu_r5q5vgQvzzUdrF.3g6906M-1742891808-1.0.1.1-XIk0vJvuWVf7Pa9xEDtNRWRwFOUDSGI3QBeFaxnDFEAST98K6uwjK_sI7y9Tic_P2ix0wrp5uqcZvcmOQzi50J06J0Cc4RKoekmAMST.62A;
        path=/; expires=Tue, 25-Mar-25 09:06:48 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=X7WeEfPwHCzgNj8J886kfTl2bMNTGVgICYHm4tnGe48-1742891808419-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '897'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '484'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999570'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_fdc2b8eed4decb017a0980459fca7361
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704]], "model": "text-embedding-3-large", "encoding_format":
      "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '84'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        1,\n    \"total_tokens\": 1\n  }\n}\n"
    headers:
      CF-RAY:
      - 925d15269e40d0e4-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:48 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=BcJnXKH4lPofcVKSCNc8NxxsJSnDAgrppAaeEB7YjSI-1742891808-1.0.1.1-QrFJe2wpY.Yt4m0dYW5z7S8G2pgDQ7VorJJp.qYdSIDUw8.jQFNvcUUWpF0vNJ7UBv8SmmwOakmfD35hRjzvslRwdKtG3790nQo.sUGhQ_M;
        path=/; expires=Tue, 25-Mar-25 09:06:48 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=ybNyOoAelQ82bzF_uoTPj7ZTRlBR55JH9KYdZziGUpM-1742891808694-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '222'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-f897b9968-llbfp
      x-envoy-upstream-service-time:
      - '136'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999998'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_4c746cdb7f2e4496af21c67eea68b307
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[791, 6864, 315, 9822, 374, 12366, 13]], "model": "text-embedding-3-large",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '115'
      content-type:
      - application/json
      cookie:
      - __cf_bm=9RuMKhg4qweSJvrgjS7W7ogTPCGJgJ8Bbq2Us4ots_s-1742891808-1.0.1.1-C4gyAEER2XAI7IlOkEhtXCfM1ndNVP2iBC2cUl99kZ7Ngp9di3f0ForIShy01rt.Pwp8qDnwwPc7wrzwDz9a_cH47kv4HvAw0N6hWyQ5EKc;
        _cfuvid=OJkzS0ShpI8FG2pvefMX1Lb5lW19BFxyDpi9pEYVh94-1742891808226-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"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\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        7,\n    \"total_tokens\": 7\n  }\n}\n"
    headers:
      CF-RAY:
      - 925d1529afd20bcf-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:48 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '107'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-7fdd7964ff-l794k
      x-envoy-upstream-service-time:
      - '68'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999993'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_dfc8315d3f99f5c08646253ba94760ac
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[791, 6864, 315, 9822, 374, 12366, 13]], "model": "text-embedding-3-large",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '115'
      content-type:
      - application/json
      cookie:
      - __cf_bm=BcJnXKH4lPofcVKSCNc8NxxsJSnDAgrppAaeEB7YjSI-1742891808-1.0.1.1-QrFJe2wpY.Yt4m0dYW5z7S8G2pgDQ7VorJJp.qYdSIDUw8.jQFNvcUUWpF0vNJ7UBv8SmmwOakmfD35hRjzvslRwdKtG3790nQo.sUGhQ_M;
        _cfuvid=ybNyOoAelQ82bzF_uoTPj7ZTRlBR55JH9KYdZziGUpM-1742891808694-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        7,\n    \"total_tokens\": 7\n  }\n}\n"
    headers:
      CF-RAY:
      - 925d152dbddfd0e4-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:49 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '145'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-6d88d855bb-nbrwb
      x-envoy-upstream-service-time:
      - '83'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999993'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_7bf802c47a28663d8eaef98e5fb7714a
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluation", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "metrics": ["semantic_similarity"], "num_rows": 2,
      "evaluation_type": "SINGLE_TURN", "language": ""}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '205'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 25 Mar 2025 08:36:50 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 0635c0d9d70ba4ea9ca314b0068fa356.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - xUxtko3kI_rZu6nrgNWIsykewFFSZGEGvd_f_S00ncWM_LQCybxGyg==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\nPlease
      return the output in a JSON format that complies with the following schema as
      specified in JSON Schema:\n{\"$defs\": {\"StatementFaithfulnessAnswer\": {\"properties\":
      {\"statement\": {\"description\": \"the original statement, word-by-word\",
      \"title\": \"Statement\", \"type\": \"string\"}, \"reason\": {\"description\":
      \"the reason of the verdict\", \"title\": \"Reason\", \"type\": \"string\"},
      \"verdict\": {\"description\": \"the verdict(0/1) of the faithfulness.\", \"title\":
      \"Verdict\", \"type\": \"integer\"}}, \"required\": [\"statement\", \"reason\",
      \"verdict\"], \"title\": \"StatementFaithfulnessAnswer\", \"type\": \"object\"}},
      \"properties\": {\"statements\": {\"items\": {\"$ref\": \"#/$defs/StatementFaithfulnessAnswer\"},
      \"title\": \"Statements\", \"type\": \"array\"}}, \"required\": [\"statements\"],
      \"title\": \"NLIStatementOutput\", \"type\": \"object\"}Do not use single quotes
      in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample
      1\nInput: {\n    \"context\": \"John is a student at XYZ University. He is pursuing
      a degree in Computer Science. He is enrolled in several courses this semester,
      including Data Structures, Algorithms, and Database Management. John is a diligent
      student and spends a significant amount of time studying and completing assignments.
      He often stays late in the library to work on his projects.\",\n    \"statements\":
      [\n        \"John is majoring in Biology.\",\n        \"John is taking a course
      on Artificial Intelligence.\",\n        \"John is a dedicated student.\",\n        \"John
      has a part-time job.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"John is majoring in Biology.\",\n            \"reason\": \"John''s major is
      explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is taking a course on Artificial Intelligence.\",\n            \"reason\":
      \"The context mentions the courses John is currently enrolled in, and Artificial
      Intelligence is not mentioned. Therefore, it cannot be deduced that John is
      taking a course on AI.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is a dedicated student.\",\n            \"reason\": \"The context states
      that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\",\n            \"verdict\": 1\n        },\n        {\n            \"statement\":
      \"John has a part-time job.\",\n            \"reason\": \"There is no information
      given in the context about John having a part-time job.\",\n            \"verdict\":
      0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    \"context\": \"Photosynthesis
      is a process used by plants, algae, and certain bacteria to convert light energy
      into chemical energy.\",\n    \"statements\": [\n        \"Albert Einstein was
      a genius.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"Albert Einstein was a genius.\",\n            \"reason\": \"The context and
      statement are unrelated\",\n            \"verdict\": 0\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"context\": \"Paris
      is the capital and most populous city of France.\",\n    \"statements\": [\n        \"Paris
      is the capital of France.\"\n    ]\n}\nOutput: ", "role": "user"}], "model":
      "gpt-4o", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '3984'
      content-type:
      - application/json
      cookie:
      - __cf_bm=Ip66UlvOYO5rwipSJy72O3AwkbOMm5kLeQqWfSdb5vA-1742891808-1.0.1.1-X6.YDAltYtb6iRkgjYMhPMGel47TR47qEAGfp_w3FPGwpInPAdZd2yxvj58HRbyzWrJfYjWXzQ4neAKPiOUuFX3kaNueR1PZ_xc6FpACjME;
        _cfuvid=AE.lqxlRgUS1TjKECKfYGsPDlKtQZEopLF4NCus0_Lc-1742891808246-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEu48ZdEVweo0u6nOK765IWmUkQpt\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742891808,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        {\\n            \\\"statement\\\": \\\"Paris is the capital of
        France.\\\",\\n            \\\"reason\\\": \\\"The context explicitly states
        that Paris is the capital of France.\\\",\\n            \\\"verdict\\\": 1\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null,\n        \"annotations\":
        []\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n
        \   }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 806,\n    \"completion_tokens\":
        56,\n    \"total_tokens\": 862,\n    \"prompt_tokens_details\": {\n      \"cached_tokens\":
        0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_c1e1ac6736\"\n}\n"
    headers:
      CF-RAY:
      - 925d1529cac4d0f2-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:50 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '1064'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '1931'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999091'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_76b6801039a4ca62c41478be65f74c00
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\nPlease
      return the output in a JSON format that complies with the following schema as
      specified in JSON Schema:\n{\"$defs\": {\"StatementFaithfulnessAnswer\": {\"properties\":
      {\"statement\": {\"description\": \"the original statement, word-by-word\",
      \"title\": \"Statement\", \"type\": \"string\"}, \"reason\": {\"description\":
      \"the reason of the verdict\", \"title\": \"Reason\", \"type\": \"string\"},
      \"verdict\": {\"description\": \"the verdict(0/1) of the faithfulness.\", \"title\":
      \"Verdict\", \"type\": \"integer\"}}, \"required\": [\"statement\", \"reason\",
      \"verdict\"], \"title\": \"StatementFaithfulnessAnswer\", \"type\": \"object\"}},
      \"properties\": {\"statements\": {\"items\": {\"$ref\": \"#/$defs/StatementFaithfulnessAnswer\"},
      \"title\": \"Statements\", \"type\": \"array\"}}, \"required\": [\"statements\"],
      \"title\": \"NLIStatementOutput\", \"type\": \"object\"}Do not use single quotes
      in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample
      1\nInput: {\n    \"context\": \"John is a student at XYZ University. He is pursuing
      a degree in Computer Science. He is enrolled in several courses this semester,
      including Data Structures, Algorithms, and Database Management. John is a diligent
      student and spends a significant amount of time studying and completing assignments.
      He often stays late in the library to work on his projects.\",\n    \"statements\":
      [\n        \"John is majoring in Biology.\",\n        \"John is taking a course
      on Artificial Intelligence.\",\n        \"John is a dedicated student.\",\n        \"John
      has a part-time job.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"John is majoring in Biology.\",\n            \"reason\": \"John''s major is
      explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is taking a course on Artificial Intelligence.\",\n            \"reason\":
      \"The context mentions the courses John is currently enrolled in, and Artificial
      Intelligence is not mentioned. Therefore, it cannot be deduced that John is
      taking a course on AI.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is a dedicated student.\",\n            \"reason\": \"The context states
      that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\",\n            \"verdict\": 1\n        },\n        {\n            \"statement\":
      \"John has a part-time job.\",\n            \"reason\": \"There is no information
      given in the context about John having a part-time job.\",\n            \"verdict\":
      0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    \"context\": \"Photosynthesis
      is a process used by plants, algae, and certain bacteria to convert light energy
      into chemical energy.\",\n    \"statements\": [\n        \"Albert Einstein was
      a genius.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"Albert Einstein was a genius.\",\n            \"reason\": \"The context and
      statement are unrelated\",\n            \"verdict\": 0\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"context\": \"Paris
      is the capital and most populous city of France.\",\n    \"statements\": [\n        \"Paris
      is the capital of France.\"\n    ]\n}\nOutput: ", "role": "user"}], "model":
      "gpt-4o", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '3984'
      content-type:
      - application/json
      cookie:
      - __cf_bm=pRHN2EkfVwTyGK3O5.mu_r5q5vgQvzzUdrF.3g6906M-1742891808-1.0.1.1-XIk0vJvuWVf7Pa9xEDtNRWRwFOUDSGI3QBeFaxnDFEAST98K6uwjK_sI7y9Tic_P2ix0wrp5uqcZvcmOQzi50J06J0Cc4RKoekmAMST.62A;
        _cfuvid=X7WeEfPwHCzgNj8J886kfTl2bMNTGVgICYHm4tnGe48-1742891808419-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEu48JHFbNIhgueM7KjCuufVxTyqs\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742891808,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        {\\n            \\\"statement\\\": \\\"Paris is the capital of
        France.\\\",\\n            \\\"reason\\\": \\\"The context explicitly states
        that Paris is the capital of France.\\\",\\n            \\\"verdict\\\": 1\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null,\n        \"annotations\":
        []\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n
        \   }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 806,\n    \"completion_tokens\":
        56,\n    \"total_tokens\": 862,\n    \"prompt_tokens_details\": {\n      \"cached_tokens\":
        0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_c1e1ac6736\"\n}\n"
    headers:
      CF-RAY:
      - 925d152adecbd0f4-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:50 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '1064'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '1978'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999091'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_88aef6939a329773ad2eff12d7936ce3
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluation", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "metrics": ["faithfulness"], "num_rows": 2, "evaluation_type":
      "SINGLE_TURN", "language": "english"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '205'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 25 Mar 2025 08:36:50 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 c214d2dc32e7103ec8cfdb215850fe4e.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - 0ka-vyuZ3j6FC6Q9xqpLD4ojTqmt-EyDcLef15UbpHtYa0N_xlfhpw==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "is_completed": true}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '124'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 25 Mar 2025 08:36:51 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 f41d2271ff7a71d63f0acb6d5ad5aa6a.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - -MZy3lSREZUxodcDHNeMxaXkF_ptLvqxc5V1ww_wK7OqkcI8xVJxdg==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 1024, "messages": [{"role": "user", "content": "\n    Use
      the following context to answer the question.\n\n    Context: Paris is the capital
      and most populous city of France.\n\n    Question: What''s the capital of France?\n    "}],
      "model": "claude-3-5-sonnet-20241022", "temperature": 0.7}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      anthropic-version:
      - '2023-06-01'
      connection:
      - keep-alive
      content-length:
      - '305'
      content-type:
      - application/json
      host:
      - api.anthropic.com
      user-agent:
      - Anthropic/Python 0.49.0
      x-api-key:
      - REDACTED
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.49.0
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
      x-stainless-timeout:
      - NOT_GIVEN
    method: POST
    uri: https://api.anthropic.com/v1/messages
  response:
    body:
      string: '{"id":"msg_01NNN9BU5mUh3A8SyeMiqyqG","type":"message","role":"assistant","model":"claude-3-5-sonnet-20241022","content":[{"type":"text","text":"Paris
        is the capital of France."}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":47,"cache_creation_input_tokens":0,"cache_read_input_tokens":0,"output_tokens":10}}'
    headers:
      CF-RAY:
      - 925d153c089cc1f9-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:51 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Robots-Tag:
      - none
      anthropic-organization-id:
      - a2610b2c-742e-455d-9552-6abe105b2a44
      anthropic-ratelimit-input-tokens-limit:
      - '400000'
      anthropic-ratelimit-input-tokens-remaining:
      - '400000'
      anthropic-ratelimit-input-tokens-reset:
      - '2025-03-25T08:36:51Z'
      anthropic-ratelimit-output-tokens-limit:
      - '80000'
      anthropic-ratelimit-output-tokens-remaining:
      - '80000'
      anthropic-ratelimit-output-tokens-reset:
      - '2025-03-25T08:36:51Z'
      anthropic-ratelimit-requests-limit:
      - '4000'
      anthropic-ratelimit-requests-remaining:
      - '3999'
      anthropic-ratelimit-requests-reset:
      - '2025-03-25T08:36:51Z'
      anthropic-ratelimit-tokens-limit:
      - '480000'
      anthropic-ratelimit-tokens-remaining:
      - '480000'
      anthropic-ratelimit-tokens-reset:
      - '2025-03-25T08:36:51Z'
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '332'
      request-id:
      - req_01UuKRob2vszyssL9R8nA8D1
      via:
      - 1.1 google
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 1024, "messages": [{"role": "user", "content": "\n    Use
      the following context to answer the question.\n\n    Context: Paris is the capital
      and most populous city of France.\n\n    Question: What''s the capital of France?\n    "}],
      "model": "claude-3-5-sonnet-20241022", "temperature": 0.7}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      anthropic-version:
      - '2023-06-01'
      connection:
      - keep-alive
      content-length:
      - '305'
      content-type:
      - application/json
      host:
      - api.anthropic.com
      user-agent:
      - Anthropic/Python 0.49.0
      x-api-key:
      - REDACTED
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.49.0
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
      x-stainless-timeout:
      - NOT_GIVEN
    method: POST
    uri: https://api.anthropic.com/v1/messages
  response:
    body:
      string: '{"id":"msg_01W1fs6Li9vfs6Crwr23igU2","type":"message","role":"assistant","model":"claude-3-5-sonnet-20241022","content":[{"type":"text","text":"The
        capital of France is Paris."}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":47,"cache_creation_input_tokens":0,"cache_read_input_tokens":0,"output_tokens":10}}'
    headers:
      CF-RAY:
      - 925d15412f39c1f9-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:53 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Robots-Tag:
      - none
      anthropic-organization-id:
      - a2610b2c-742e-455d-9552-6abe105b2a44
      anthropic-ratelimit-input-tokens-limit:
      - '400000'
      anthropic-ratelimit-input-tokens-remaining:
      - '400000'
      anthropic-ratelimit-input-tokens-reset:
      - '2025-03-25T08:36:53Z'
      anthropic-ratelimit-output-tokens-limit:
      - '80000'
      anthropic-ratelimit-output-tokens-remaining:
      - '80000'
      anthropic-ratelimit-output-tokens-reset:
      - '2025-03-25T08:36:53Z'
      anthropic-ratelimit-requests-limit:
      - '4000'
      anthropic-ratelimit-requests-remaining:
      - '3999'
      anthropic-ratelimit-requests-reset:
      - '2025-03-25T08:36:52Z'
      anthropic-ratelimit-tokens-limit:
      - '480000'
      anthropic-ratelimit-tokens-remaining:
      - '480000'
      anthropic-ratelimit-tokens-reset:
      - '2025-03-25T08:36:53Z'
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '332'
      request-id:
      - req_01GP6NTMZqFwZLrUKnN9fhc8
      via:
      - 1.1 google
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "is_completed": false}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '125'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 25 Mar 2025 08:36:53 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 30f34c4ade43b29ffd4cdc2465cd5c42.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - OGKJScY2tZRIX6NqJaFGjeEdmICVVSJcV6RO64HVHYOu55NuZUh0kw==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a question and an answer, analyze the
      complexity of each sentence in the answer. Break down each sentence into one
      or more fully understandable statements. Ensure that no pronouns are used in
      any statement. Format the outputs in JSON.\nPlease return the output in a JSON
      format that complies with the following schema as specified in JSON Schema:\n{\"properties\":
      {\"statements\": {\"description\": \"The generated statements\", \"items\":
      {\"type\": \"string\"}, \"title\": \"Statements\", \"type\": \"array\"}}, \"required\":
      [\"statements\"], \"title\": \"StatementGeneratorOutput\", \"type\": \"object\"}Do
      not use single quotes in your response but double quotes,properly escaped with
      a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    \"question\":
      \"Who was Albert Einstein and what is he best known for?\",\n    \"answer\":
      \"He was a German-born theoretical physicist, widely acknowledged to be one
      of the greatest and most influential physicists of all time. He was best known
      for developing the theory of relativity, he also made important contributions
      to the development of the theory of quantum mechanics.\"\n}\nOutput: {\n    \"statements\":
      [\n        \"Albert Einstein was a German-born theoretical physicist.\",\n        \"Albert
      Einstein is recognized as one of the greatest and most influential physicists
      of all time.\",\n        \"Albert Einstein was best known for developing the
      theory of relativity.\",\n        \"Albert Einstein also made important contributions
      to the development of the theory of quantum mechanics.\"\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"question\": \"What''s
      the capital of France?\",\n    \"answer\": \"The capital of France is Paris.\"\n}\nOutput:
      ", "role": "user"}], "model": "gpt-4o", "n": 1, "stream": false, "temperature":
      1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '1904'
      content-type:
      - application/json
      cookie:
      - __cf_bm=pRHN2EkfVwTyGK3O5.mu_r5q5vgQvzzUdrF.3g6906M-1742891808-1.0.1.1-XIk0vJvuWVf7Pa9xEDtNRWRwFOUDSGI3QBeFaxnDFEAST98K6uwjK_sI7y9Tic_P2ix0wrp5uqcZvcmOQzi50J06J0Cc4RKoekmAMST.62A;
        _cfuvid=X7WeEfPwHCzgNj8J886kfTl2bMNTGVgICYHm4tnGe48-1742891808419-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEu4EhywlvPLtaBzGyCbNwNlck1lY\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742891814,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        \\\"Paris is the capital of France.\\\"\\n    ]\\n}\\n```\",\n
        \       \"refusal\": null,\n        \"annotations\": []\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        357,\n    \"completion_tokens\": 24,\n    \"total_tokens\": 381,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_90d33c15d4\"\n}\n"
    headers:
      CF-RAY:
      - 925d154d4974d0f2-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:54 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '897'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '299'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999570'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_e1ebf37bf1a385f35047faeb8f77318f
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a question and an answer, analyze the
      complexity of each sentence in the answer. Break down each sentence into one
      or more fully understandable statements. Ensure that no pronouns are used in
      any statement. Format the outputs in JSON.\nPlease return the output in a JSON
      format that complies with the following schema as specified in JSON Schema:\n{\"properties\":
      {\"statements\": {\"description\": \"The generated statements\", \"items\":
      {\"type\": \"string\"}, \"title\": \"Statements\", \"type\": \"array\"}}, \"required\":
      [\"statements\"], \"title\": \"StatementGeneratorOutput\", \"type\": \"object\"}Do
      not use single quotes in your response but double quotes,properly escaped with
      a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    \"question\":
      \"Who was Albert Einstein and what is he best known for?\",\n    \"answer\":
      \"He was a German-born theoretical physicist, widely acknowledged to be one
      of the greatest and most influential physicists of all time. He was best known
      for developing the theory of relativity, he also made important contributions
      to the development of the theory of quantum mechanics.\"\n}\nOutput: {\n    \"statements\":
      [\n        \"Albert Einstein was a German-born theoretical physicist.\",\n        \"Albert
      Einstein is recognized as one of the greatest and most influential physicists
      of all time.\",\n        \"Albert Einstein was best known for developing the
      theory of relativity.\",\n        \"Albert Einstein also made important contributions
      to the development of the theory of quantum mechanics.\"\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"question\": \"What''s
      the capital of France?\",\n    \"answer\": \"Paris is the capital of France.\"\n}\nOutput:
      ", "role": "user"}], "model": "gpt-4o", "n": 1, "stream": false, "temperature":
      1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '1904'
      content-type:
      - application/json
      cookie:
      - __cf_bm=pRHN2EkfVwTyGK3O5.mu_r5q5vgQvzzUdrF.3g6906M-1742891808-1.0.1.1-XIk0vJvuWVf7Pa9xEDtNRWRwFOUDSGI3QBeFaxnDFEAST98K6uwjK_sI7y9Tic_P2ix0wrp5uqcZvcmOQzi50J06J0Cc4RKoekmAMST.62A;
        _cfuvid=X7WeEfPwHCzgNj8J886kfTl2bMNTGVgICYHm4tnGe48-1742891808419-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEu4EE6UKyATN4zAP8mZLMFj2pxzg\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742891814,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        \\\"Paris is the capital of France.\\\"\\n    ]\\n}\\n```\",\n
        \       \"refusal\": null,\n        \"annotations\": []\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        357,\n    \"completion_tokens\": 24,\n    \"total_tokens\": 381,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_90d33c15d4\"\n}\n"
    headers:
      CF-RAY:
      - 925d154ed99fd0f4-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:54 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '897'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '363'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999570'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_6a74ab21d3b6006e6e2b74c690d78004
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704]], "model": "text-embedding-3-large", "encoding_format":
      "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '84'
      content-type:
      - application/json
      cookie:
      - __cf_bm=BcJnXKH4lPofcVKSCNc8NxxsJSnDAgrppAaeEB7YjSI-1742891808-1.0.1.1-QrFJe2wpY.Yt4m0dYW5z7S8G2pgDQ7VorJJp.qYdSIDUw8.jQFNvcUUWpF0vNJ7UBv8SmmwOakmfD35hRjzvslRwdKtG3790nQo.sUGhQ_M;
        _cfuvid=ybNyOoAelQ82bzF_uoTPj7ZTRlBR55JH9KYdZziGUpM-1742891808694-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        1,\n    \"total_tokens\": 1\n  }\n}\n"
    headers:
      CF-RAY:
      - 925d154d7eb5d0e4-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:54 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '199'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-bd9fb9bb5-cfdf8
      x-envoy-upstream-service-time:
      - '101'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999999'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_3e2bf05bfddf321c2fe6ad0abd094696
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704]], "model": "text-embedding-3-large", "encoding_format":
      "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '84'
      content-type:
      - application/json
      cookie:
      - __cf_bm=BcJnXKH4lPofcVKSCNc8NxxsJSnDAgrppAaeEB7YjSI-1742891808-1.0.1.1-QrFJe2wpY.Yt4m0dYW5z7S8G2pgDQ7VorJJp.qYdSIDUw8.jQFNvcUUWpF0vNJ7UBv8SmmwOakmfD35hRjzvslRwdKtG3790nQo.sUGhQ_M;
        _cfuvid=ybNyOoAelQ82bzF_uoTPj7ZTRlBR55JH9KYdZziGUpM-1742891808694-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        1,\n    \"total_tokens\": 1\n  }\n}\n"
    headers:
      CF-RAY:
      - 925d154edf470bcf-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:54 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '185'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-678fbc785b-vndfh
      x-envoy-upstream-service-time:
      - '129'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999998'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_8441d44eabd22d22fae6b5d107118229
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[791, 6864, 315, 9822, 374, 12366, 13]], "model": "text-embedding-3-large",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '115'
      content-type:
      - application/json
      cookie:
      - __cf_bm=BcJnXKH4lPofcVKSCNc8NxxsJSnDAgrppAaeEB7YjSI-1742891808-1.0.1.1-QrFJe2wpY.Yt4m0dYW5z7S8G2pgDQ7VorJJp.qYdSIDUw8.jQFNvcUUWpF0vNJ7UBv8SmmwOakmfD35hRjzvslRwdKtG3790nQo.sUGhQ_M;
        _cfuvid=ybNyOoAelQ82bzF_uoTPj7ZTRlBR55JH9KYdZziGUpM-1742891808694-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        7,\n    \"total_tokens\": 7\n  }\n}\n"
    headers:
      CF-RAY:
      - 925d1553aa0d0bcf-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:55 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '70'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-84d4976dd6-gh44x
      x-envoy-upstream-service-time:
      - '52'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999993'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_6f658081bb42c210dcb03924dc2fbd69
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\nPlease
      return the output in a JSON format that complies with the following schema as
      specified in JSON Schema:\n{\"$defs\": {\"StatementFaithfulnessAnswer\": {\"properties\":
      {\"statement\": {\"description\": \"the original statement, word-by-word\",
      \"title\": \"Statement\", \"type\": \"string\"}, \"reason\": {\"description\":
      \"the reason of the verdict\", \"title\": \"Reason\", \"type\": \"string\"},
      \"verdict\": {\"description\": \"the verdict(0/1) of the faithfulness.\", \"title\":
      \"Verdict\", \"type\": \"integer\"}}, \"required\": [\"statement\", \"reason\",
      \"verdict\"], \"title\": \"StatementFaithfulnessAnswer\", \"type\": \"object\"}},
      \"properties\": {\"statements\": {\"items\": {\"$ref\": \"#/$defs/StatementFaithfulnessAnswer\"},
      \"title\": \"Statements\", \"type\": \"array\"}}, \"required\": [\"statements\"],
      \"title\": \"NLIStatementOutput\", \"type\": \"object\"}Do not use single quotes
      in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample
      1\nInput: {\n    \"context\": \"John is a student at XYZ University. He is pursuing
      a degree in Computer Science. He is enrolled in several courses this semester,
      including Data Structures, Algorithms, and Database Management. John is a diligent
      student and spends a significant amount of time studying and completing assignments.
      He often stays late in the library to work on his projects.\",\n    \"statements\":
      [\n        \"John is majoring in Biology.\",\n        \"John is taking a course
      on Artificial Intelligence.\",\n        \"John is a dedicated student.\",\n        \"John
      has a part-time job.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"John is majoring in Biology.\",\n            \"reason\": \"John''s major is
      explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is taking a course on Artificial Intelligence.\",\n            \"reason\":
      \"The context mentions the courses John is currently enrolled in, and Artificial
      Intelligence is not mentioned. Therefore, it cannot be deduced that John is
      taking a course on AI.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is a dedicated student.\",\n            \"reason\": \"The context states
      that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\",\n            \"verdict\": 1\n        },\n        {\n            \"statement\":
      \"John has a part-time job.\",\n            \"reason\": \"There is no information
      given in the context about John having a part-time job.\",\n            \"verdict\":
      0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    \"context\": \"Photosynthesis
      is a process used by plants, algae, and certain bacteria to convert light energy
      into chemical energy.\",\n    \"statements\": [\n        \"Albert Einstein was
      a genius.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"Albert Einstein was a genius.\",\n            \"reason\": \"The context and
      statement are unrelated\",\n            \"verdict\": 0\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"context\": \"Paris
      is the capital and most populous city of France.\",\n    \"statements\": [\n        \"Paris
      is the capital of France.\"\n    ]\n}\nOutput: ", "role": "user"}], "model":
      "gpt-4o", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '3984'
      content-type:
      - application/json
      cookie:
      - __cf_bm=pRHN2EkfVwTyGK3O5.mu_r5q5vgQvzzUdrF.3g6906M-1742891808-1.0.1.1-XIk0vJvuWVf7Pa9xEDtNRWRwFOUDSGI3QBeFaxnDFEAST98K6uwjK_sI7y9Tic_P2ix0wrp5uqcZvcmOQzi50J06J0Cc4RKoekmAMST.62A;
        _cfuvid=X7WeEfPwHCzgNj8J886kfTl2bMNTGVgICYHm4tnGe48-1742891808419-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEu4EM3o8dpUruR46OBhuPzLLsCSm\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742891814,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        {\\n            \\\"statement\\\": \\\"Paris is the capital of
        France.\\\",\\n            \\\"reason\\\": \\\"The context explicitly states
        that Paris is the capital of France.\\\",\\n            \\\"verdict\\\": 1\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null,\n        \"annotations\":
        []\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n
        \   }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 806,\n    \"completion_tokens\":
        56,\n    \"total_tokens\": 862,\n    \"prompt_tokens_details\": {\n      \"cached_tokens\":
        0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_c1e1ac6736\"\n}\n"
    headers:
      CF-RAY:
      - 925d15503f15d0f2-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:55 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '1064'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '1042'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999091'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_e485cef4542e78b1e3d1eff4c7cc0d0a
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\nPlease
      return the output in a JSON format that complies with the following schema as
      specified in JSON Schema:\n{\"$defs\": {\"StatementFaithfulnessAnswer\": {\"properties\":
      {\"statement\": {\"description\": \"the original statement, word-by-word\",
      \"title\": \"Statement\", \"type\": \"string\"}, \"reason\": {\"description\":
      \"the reason of the verdict\", \"title\": \"Reason\", \"type\": \"string\"},
      \"verdict\": {\"description\": \"the verdict(0/1) of the faithfulness.\", \"title\":
      \"Verdict\", \"type\": \"integer\"}}, \"required\": [\"statement\", \"reason\",
      \"verdict\"], \"title\": \"StatementFaithfulnessAnswer\", \"type\": \"object\"}},
      \"properties\": {\"statements\": {\"items\": {\"$ref\": \"#/$defs/StatementFaithfulnessAnswer\"},
      \"title\": \"Statements\", \"type\": \"array\"}}, \"required\": [\"statements\"],
      \"title\": \"NLIStatementOutput\", \"type\": \"object\"}Do not use single quotes
      in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample
      1\nInput: {\n    \"context\": \"John is a student at XYZ University. He is pursuing
      a degree in Computer Science. He is enrolled in several courses this semester,
      including Data Structures, Algorithms, and Database Management. John is a diligent
      student and spends a significant amount of time studying and completing assignments.
      He often stays late in the library to work on his projects.\",\n    \"statements\":
      [\n        \"John is majoring in Biology.\",\n        \"John is taking a course
      on Artificial Intelligence.\",\n        \"John is a dedicated student.\",\n        \"John
      has a part-time job.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"John is majoring in Biology.\",\n            \"reason\": \"John''s major is
      explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is taking a course on Artificial Intelligence.\",\n            \"reason\":
      \"The context mentions the courses John is currently enrolled in, and Artificial
      Intelligence is not mentioned. Therefore, it cannot be deduced that John is
      taking a course on AI.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is a dedicated student.\",\n            \"reason\": \"The context states
      that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\",\n            \"verdict\": 1\n        },\n        {\n            \"statement\":
      \"John has a part-time job.\",\n            \"reason\": \"There is no information
      given in the context about John having a part-time job.\",\n            \"verdict\":
      0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    \"context\": \"Photosynthesis
      is a process used by plants, algae, and certain bacteria to convert light energy
      into chemical energy.\",\n    \"statements\": [\n        \"Albert Einstein was
      a genius.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"Albert Einstein was a genius.\",\n            \"reason\": \"The context and
      statement are unrelated\",\n            \"verdict\": 0\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"context\": \"Paris
      is the capital and most populous city of France.\",\n    \"statements\": [\n        \"Paris
      is the capital of France.\"\n    ]\n}\nOutput: ", "role": "user"}], "model":
      "gpt-4o", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '3984'
      content-type:
      - application/json
      cookie:
      - __cf_bm=pRHN2EkfVwTyGK3O5.mu_r5q5vgQvzzUdrF.3g6906M-1742891808-1.0.1.1-XIk0vJvuWVf7Pa9xEDtNRWRwFOUDSGI3QBeFaxnDFEAST98K6uwjK_sI7y9Tic_P2ix0wrp5uqcZvcmOQzi50J06J0Cc4RKoekmAMST.62A;
        _cfuvid=X7WeEfPwHCzgNj8J886kfTl2bMNTGVgICYHm4tnGe48-1742891808419-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEu4EVy744Ct6i6CeCmjOI7gl8qTf\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742891814,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        {\\n            \\\"statement\\\": \\\"Paris is the capital of
        France.\\\",\\n            \\\"reason\\\": \\\"The context explicitly states
        that Paris is the capital of France.\\\",\\n            \\\"verdict\\\": 1\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null,\n        \"annotations\":
        []\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n
        \   }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 806,\n    \"completion_tokens\":
        56,\n    \"total_tokens\": 862,\n    \"prompt_tokens_details\": {\n      \"cached_tokens\":
        0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_c1e1ac6736\"\n}\n"
    headers:
      CF-RAY:
      - 925d15526f9ed0f4-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:55 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '1064'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '691'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999091'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_3e4f40154a70a8612bae87821f77957c
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704, 374, 279, 6864, 315, 9822, 13]], "model": "text-embedding-3-large",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '115'
      content-type:
      - application/json
      cookie:
      - __cf_bm=BcJnXKH4lPofcVKSCNc8NxxsJSnDAgrppAaeEB7YjSI-1742891808-1.0.1.1-QrFJe2wpY.Yt4m0dYW5z7S8G2pgDQ7VorJJp.qYdSIDUw8.jQFNvcUUWpF0vNJ7UBv8SmmwOakmfD35hRjzvslRwdKtG3790nQo.sUGhQ_M;
        _cfuvid=ybNyOoAelQ82bzF_uoTPj7ZTRlBR55JH9KYdZziGUpM-1742891808694-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        7,\n    \"total_tokens\": 7\n  }\n}\n"
    headers:
      CF-RAY:
      - 925d15533b40d0e4-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 25 Mar 2025 08:36:55 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '125'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-55d74949f9-2mdl2
      x-envoy-upstream-service-time:
      - '76'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999993'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_28ce64db68676a3c7167df8a41c4f400
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluation", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "metrics": ["semantic_similarity"], "num_rows": 2,
      "evaluation_type": "SINGLE_TURN", "language": ""}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '205'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 25 Mar 2025 08:36:55 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 2cad6ba9a09bb1137994529f32cb6d66.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - d7_f_waRcL0jiknIuWG_iJ98FylkkFjyHXbSmaUWxFMh4egnRx9ZdQ==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluation", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "metrics": ["faithfulness"], "num_rows": 2, "evaluation_type":
      "SINGLE_TURN", "language": "english"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '205'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 25 Mar 2025 08:36:56 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 a58780d22b5e142a1e7e092cfb4a356c.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - XKqO51xo-U1y37An4OjeFn_MZYrtmwiQ_YEitUOPAmLQ66wcvMyliA==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "is_completed": true}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '124'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 25 Mar 2025 08:36:56 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 a58780d22b5e142a1e7e092cfb4a356c.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - nxO7fiJwvAtyFShQPp9S6mksYRGJYCEqFYe8MsBRnMXSkt0Z5-kUcQ==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "is_completed": true}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '124'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 25 Mar 2025 08:36:56 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 0635c0d9d70ba4ea9ca314b0068fa356.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - XltLnDP3GA-LNsIa3-JM-R702khnIvl_mDn64dYAuFqpW-DR10XWHQ==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
version: 1
