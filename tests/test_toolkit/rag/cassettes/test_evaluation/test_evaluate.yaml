interactions:
- request:
    body: '{"event_type": "evaluate", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "is_completed": false}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '125'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 24 Mar 2025 19:45:50 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 2cad6ba9a09bb1137994529f32cb6d66.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - sCJItfN0DP2v8sMPIQv9V2-S7LABw2bigiPKggBoosO1Z4RZ9tKhvg==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-0
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "is_completed": false}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '125'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 24 Mar 2025 19:45:51 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 2b4cbbd85f7c04a22cdd61a36f389bb0.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - D2jvQoaKOOYh6fnG1BaNuVNQd9-OyuXlOxE9JuSWb_2HcydMPouK4A==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-0
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a question and an answer, analyze the
      complexity of each sentence in the answer. Break down each sentence into one
      or more fully understandable statements. Ensure that no pronouns are used in
      any statement. Format the outputs in JSON.\nPlease return the output in a JSON
      format that complies with the following schema as specified in JSON Schema:\n{\"properties\":
      {\"statements\": {\"description\": \"The generated statements\", \"items\":
      {\"type\": \"string\"}, \"title\": \"Statements\", \"type\": \"array\"}}, \"required\":
      [\"statements\"], \"title\": \"StatementGeneratorOutput\", \"type\": \"object\"}Do
      not use single quotes in your response but double quotes,properly escaped with
      a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    \"question\":
      \"Who was Albert Einstein and what is he best known for?\",\n    \"answer\":
      \"He was a German-born theoretical physicist, widely acknowledged to be one
      of the greatest and most influential physicists of all time. He was best known
      for developing the theory of relativity, he also made important contributions
      to the development of the theory of quantum mechanics.\"\n}\nOutput: {\n    \"statements\":
      [\n        \"Albert Einstein was a German-born theoretical physicist.\",\n        \"Albert
      Einstein is recognized as one of the greatest and most influential physicists
      of all time.\",\n        \"Albert Einstein was best known for developing the
      theory of relativity.\",\n        \"Albert Einstein also made important contributions
      to the development of the theory of quantum mechanics.\"\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"question\": \"What''s
      the capital of France?\",\n    \"answer\": \"The capital of France is Paris.\"\n}\nOutput:
      ", "role": "user"}], "model": "gpt-4o", "n": 1, "stream": false, "temperature":
      1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '1904'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEi23btyZuT3nm0v3kClUcKoxe5gp\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742845551,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        \\\"Paris is the capital of France.\\\"\\n    ]\\n}\\n```\",\n
        \       \"refusal\": null,\n        \"annotations\": []\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        357,\n    \"completion_tokens\": 24,\n    \"total_tokens\": 381,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_90d33c15d4\"\n}\n"
    headers:
      CF-RAY:
      - 9258abd819635b4e-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:51 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=Fe925Teymp5JIu6pPpIl_igozwX9VORuvagP2jECpT8-1742845551-1.0.1.1-voyYTfWz.fi9iVjN3lDCOeGlZiWTYaZ_zZ5ykqn0etupZbYGZfPhmEXtB9Drzw6AMrwtCMi0xeF_1tOuoOz0tGzMC4FhxI4XoJcR1N6vhRM;
        path=/; expires=Mon, 24-Mar-25 20:15:51 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=9rNwUGO4f5pK0FytLKG6nhLSfegPydBxg1sNybSkSl8-1742845551871-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '897'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '357'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999570'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_56e82e6869fd92429e8f0dc5e7fd4e66
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704]], "model": "text-embedding-3-large", "encoding_format":
      "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '84'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        1,\n    \"total_tokens\": 1\n  }\n}\n"
    headers:
      CF-RAY:
      - 9258abd7fecb28d0-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:51 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=9MNvyK7xtrPfBcqgArVmJQXag8kLKtA2ls6k69VEiBY-1742845551-1.0.1.1-xP6B2xDohGdgjU2X.fvYo8DZoB3.LCvR8LvsIb1J1fjKuLUBFqB0V1bl0HQl1.ABi3rGXuVuO0cq30BrcEdhWsww5jUbK2K5LuZjgQVqhe8;
        path=/; expires=Mon, 24-Mar-25 20:15:51 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=7pWXw0Uj9293i02LoBQvsttbOi5wG9d9HiaUXV3BwJc-1742845551900-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '189'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-64988d66cf-dbv4q
      x-envoy-upstream-service-time:
      - '151'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999998'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_acccd7c70ec5a986e0be0c3f2950e1cd
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a question and an answer, analyze the
      complexity of each sentence in the answer. Break down each sentence into one
      or more fully understandable statements. Ensure that no pronouns are used in
      any statement. Format the outputs in JSON.\nPlease return the output in a JSON
      format that complies with the following schema as specified in JSON Schema:\n{\"properties\":
      {\"statements\": {\"description\": \"The generated statements\", \"items\":
      {\"type\": \"string\"}, \"title\": \"Statements\", \"type\": \"array\"}}, \"required\":
      [\"statements\"], \"title\": \"StatementGeneratorOutput\", \"type\": \"object\"}Do
      not use single quotes in your response but double quotes,properly escaped with
      a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    \"question\":
      \"Who was Albert Einstein and what is he best known for?\",\n    \"answer\":
      \"He was a German-born theoretical physicist, widely acknowledged to be one
      of the greatest and most influential physicists of all time. He was best known
      for developing the theory of relativity, he also made important contributions
      to the development of the theory of quantum mechanics.\"\n}\nOutput: {\n    \"statements\":
      [\n        \"Albert Einstein was a German-born theoretical physicist.\",\n        \"Albert
      Einstein is recognized as one of the greatest and most influential physicists
      of all time.\",\n        \"Albert Einstein was best known for developing the
      theory of relativity.\",\n        \"Albert Einstein also made important contributions
      to the development of the theory of quantum mechanics.\"\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"question\": \"What''s
      the capital of France?\",\n    \"answer\": \"The capital of France is Paris.\"\n}\nOutput:
      ", "role": "user"}], "model": "gpt-4o", "n": 1, "stream": false, "temperature":
      1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '1904'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEi23TjPQEBkXUZH0jDzEsCdKMiFV\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742845551,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        \\\"Paris is the capital of France.\\\"\\n    ]\\n}\\n```\",\n
        \       \"refusal\": null,\n        \"annotations\": []\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        357,\n    \"completion_tokens\": 24,\n    \"total_tokens\": 381,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_90d33c15d4\"\n}\n"
    headers:
      CF-RAY:
      - 9258abd80f8e9322-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:51 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=Y3Ou9N1_BOUcVqYqZxtdjDQCt3p0_esCJQiw3ZlzSHQ-1742845551-1.0.1.1-QzpCBoGVONFJPsqcNMQXNH6l0J460YVChxA3UYhjfdG2FlZRGYY99ZDLckMIUl18n5.H3e2XBREDjG7F3CY0gkmB_r6JouG0_ddO1lHan4c;
        path=/; expires=Mon, 24-Mar-25 20:15:51 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=qCsVZHYt5q.94yhdhOB73OVyRX2.n9I.lUB.Vj46Lf8-1742845551998-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '897'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '484'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999570'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_9036d02e41bbfbb7a4d1662326556d75
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704]], "model": "text-embedding-3-large", "encoding_format":
      "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '84'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        1,\n    \"total_tokens\": 1\n  }\n}\n"
    headers:
      CF-RAY:
      - 9258abd81abc0d4f-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:51 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=XSC1F1OALmfRtY4n0H.ONQGemEkbZkdx.OCCfGVg18o-1742845551-1.0.1.1-8baJCBJ82m7QXtMmzliv9upSvIm8g_abGuSKVsnzVotsjxr6RVfjFwVK8REgQS2QA0dPsPV4gJUGXtbjrUJYvmFJLE7DWJQf..Z9FfCadOY;
        path=/; expires=Mon, 24-Mar-25 20:15:51 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=nsXfAqQwPPE3uETf7ALcE2mX7dCRlRq_AtbGvMcBuj0-1742845551927-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '168'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-64988d66cf-h9kdf
      x-envoy-upstream-service-time:
      - '94'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999998'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_bec99678b6f5e7531b3086e06216f917
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[791, 6864, 315, 9822, 374, 12366, 13]], "model": "text-embedding-3-large",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '115'
      content-type:
      - application/json
      cookie:
      - __cf_bm=XSC1F1OALmfRtY4n0H.ONQGemEkbZkdx.OCCfGVg18o-1742845551-1.0.1.1-8baJCBJ82m7QXtMmzliv9upSvIm8g_abGuSKVsnzVotsjxr6RVfjFwVK8REgQS2QA0dPsPV4gJUGXtbjrUJYvmFJLE7DWJQf..Z9FfCadOY;
        _cfuvid=nsXfAqQwPPE3uETf7ALcE2mX7dCRlRq_AtbGvMcBuj0-1742845551927-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        7,\n    \"total_tokens\": 7\n  }\n}\n"
    headers:
      CF-RAY:
      - 9258abdc29aa28d0-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:52 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '167'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-9bb97d97b-4w94r
      x-envoy-upstream-service-time:
      - '107'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999993'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_754d05635f04f3a61159622a04cf95f6
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[791, 6864, 315, 9822, 374, 12366, 13]], "model": "text-embedding-3-large",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '115'
      content-type:
      - application/json
      cookie:
      - __cf_bm=XSC1F1OALmfRtY4n0H.ONQGemEkbZkdx.OCCfGVg18o-1742845551-1.0.1.1-8baJCBJ82m7QXtMmzliv9upSvIm8g_abGuSKVsnzVotsjxr6RVfjFwVK8REgQS2QA0dPsPV4gJUGXtbjrUJYvmFJLE7DWJQf..Z9FfCadOY;
        _cfuvid=nsXfAqQwPPE3uETf7ALcE2mX7dCRlRq_AtbGvMcBuj0-1742845551927-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        7,\n    \"total_tokens\": 7\n  }\n}\n"
    headers:
      CF-RAY:
      - 9258abdc79350d4f-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:52 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '152'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-bd9fb9bb5-dp4rg
      x-envoy-upstream-service-time:
      - '76'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999993'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_45aa9f7ad3e9644e288c3789cbb5a01a
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\nPlease
      return the output in a JSON format that complies with the following schema as
      specified in JSON Schema:\n{\"$defs\": {\"StatementFaithfulnessAnswer\": {\"properties\":
      {\"statement\": {\"description\": \"the original statement, word-by-word\",
      \"title\": \"Statement\", \"type\": \"string\"}, \"reason\": {\"description\":
      \"the reason of the verdict\", \"title\": \"Reason\", \"type\": \"string\"},
      \"verdict\": {\"description\": \"the verdict(0/1) of the faithfulness.\", \"title\":
      \"Verdict\", \"type\": \"integer\"}}, \"required\": [\"statement\", \"reason\",
      \"verdict\"], \"title\": \"StatementFaithfulnessAnswer\", \"type\": \"object\"}},
      \"properties\": {\"statements\": {\"items\": {\"$ref\": \"#/$defs/StatementFaithfulnessAnswer\"},
      \"title\": \"Statements\", \"type\": \"array\"}}, \"required\": [\"statements\"],
      \"title\": \"NLIStatementOutput\", \"type\": \"object\"}Do not use single quotes
      in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample
      1\nInput: {\n    \"context\": \"John is a student at XYZ University. He is pursuing
      a degree in Computer Science. He is enrolled in several courses this semester,
      including Data Structures, Algorithms, and Database Management. John is a diligent
      student and spends a significant amount of time studying and completing assignments.
      He often stays late in the library to work on his projects.\",\n    \"statements\":
      [\n        \"John is majoring in Biology.\",\n        \"John is taking a course
      on Artificial Intelligence.\",\n        \"John is a dedicated student.\",\n        \"John
      has a part-time job.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"John is majoring in Biology.\",\n            \"reason\": \"John''s major is
      explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is taking a course on Artificial Intelligence.\",\n            \"reason\":
      \"The context mentions the courses John is currently enrolled in, and Artificial
      Intelligence is not mentioned. Therefore, it cannot be deduced that John is
      taking a course on AI.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is a dedicated student.\",\n            \"reason\": \"The context states
      that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\",\n            \"verdict\": 1\n        },\n        {\n            \"statement\":
      \"John has a part-time job.\",\n            \"reason\": \"There is no information
      given in the context about John having a part-time job.\",\n            \"verdict\":
      0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    \"context\": \"Photosynthesis
      is a process used by plants, algae, and certain bacteria to convert light energy
      into chemical energy.\",\n    \"statements\": [\n        \"Albert Einstein was
      a genius.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"Albert Einstein was a genius.\",\n            \"reason\": \"The context and
      statement are unrelated\",\n            \"verdict\": 0\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"context\": \"Paris
      is the capital and most populous city of France.\",\n    \"statements\": [\n        \"Paris
      is the capital of France.\"\n    ]\n}\nOutput: ", "role": "user"}], "model":
      "gpt-4o", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '3984'
      content-type:
      - application/json
      cookie:
      - __cf_bm=Y3Ou9N1_BOUcVqYqZxtdjDQCt3p0_esCJQiw3ZlzSHQ-1742845551-1.0.1.1-QzpCBoGVONFJPsqcNMQXNH6l0J460YVChxA3UYhjfdG2FlZRGYY99ZDLckMIUl18n5.H3e2XBREDjG7F3CY0gkmB_r6JouG0_ddO1lHan4c;
        _cfuvid=qCsVZHYt5q.94yhdhOB73OVyRX2.n9I.lUB.Vj46Lf8-1742845551998-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEi24sYjMROwtUF1OO77OhlZrOXDU\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742845552,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        {\\n            \\\"statement\\\": \\\"Paris is the capital of
        France.\\\",\\n            \\\"reason\\\": \\\"The context explicitly states
        that Paris is the capital of France.\\\",\\n            \\\"verdict\\\": 1\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null,\n        \"annotations\":
        []\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n
        \   }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 806,\n    \"completion_tokens\":
        56,\n    \"total_tokens\": 862,\n    \"prompt_tokens_details\": {\n      \"cached_tokens\":
        0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_90d33c15d4\"\n}\n"
    headers:
      CF-RAY:
      - 9258abdc39979322-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:53 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '1064'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '1007'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999091'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_e1e1667948f5e71a7f3240312a83bceb
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluation", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "metrics": ["semantic_similarity"], "num_rows": 2,
      "evaluation_type": "SINGLE_TURN", "language": ""}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '205'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 24 Mar 2025 19:45:53 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 d72c0772ef5ebc1169e55ec7e6d80c06.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - 2wtjyl-ZHzImfQEetPOmrLzxYZEjfwdFFJKuWIpUpSzihrgv-fLn9A==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-0
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluation", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "metrics": ["faithfulness"], "num_rows": 1, "evaluation_type":
      "SINGLE_TURN", "language": "english"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '205'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 24 Mar 2025 19:45:53 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 f9d915518ed027897fa069c929a4879c.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - JryRU_mhFa7mY6QQY_dHwnu57RIkE0bM0KAEyCZ4pbJMB-UDM4Rbkw==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-0
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\nPlease
      return the output in a JSON format that complies with the following schema as
      specified in JSON Schema:\n{\"$defs\": {\"StatementFaithfulnessAnswer\": {\"properties\":
      {\"statement\": {\"description\": \"the original statement, word-by-word\",
      \"title\": \"Statement\", \"type\": \"string\"}, \"reason\": {\"description\":
      \"the reason of the verdict\", \"title\": \"Reason\", \"type\": \"string\"},
      \"verdict\": {\"description\": \"the verdict(0/1) of the faithfulness.\", \"title\":
      \"Verdict\", \"type\": \"integer\"}}, \"required\": [\"statement\", \"reason\",
      \"verdict\"], \"title\": \"StatementFaithfulnessAnswer\", \"type\": \"object\"}},
      \"properties\": {\"statements\": {\"items\": {\"$ref\": \"#/$defs/StatementFaithfulnessAnswer\"},
      \"title\": \"Statements\", \"type\": \"array\"}}, \"required\": [\"statements\"],
      \"title\": \"NLIStatementOutput\", \"type\": \"object\"}Do not use single quotes
      in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample
      1\nInput: {\n    \"context\": \"John is a student at XYZ University. He is pursuing
      a degree in Computer Science. He is enrolled in several courses this semester,
      including Data Structures, Algorithms, and Database Management. John is a diligent
      student and spends a significant amount of time studying and completing assignments.
      He often stays late in the library to work on his projects.\",\n    \"statements\":
      [\n        \"John is majoring in Biology.\",\n        \"John is taking a course
      on Artificial Intelligence.\",\n        \"John is a dedicated student.\",\n        \"John
      has a part-time job.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"John is majoring in Biology.\",\n            \"reason\": \"John''s major is
      explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is taking a course on Artificial Intelligence.\",\n            \"reason\":
      \"The context mentions the courses John is currently enrolled in, and Artificial
      Intelligence is not mentioned. Therefore, it cannot be deduced that John is
      taking a course on AI.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is a dedicated student.\",\n            \"reason\": \"The context states
      that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\",\n            \"verdict\": 1\n        },\n        {\n            \"statement\":
      \"John has a part-time job.\",\n            \"reason\": \"There is no information
      given in the context about John having a part-time job.\",\n            \"verdict\":
      0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    \"context\": \"Photosynthesis
      is a process used by plants, algae, and certain bacteria to convert light energy
      into chemical energy.\",\n    \"statements\": [\n        \"Albert Einstein was
      a genius.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"Albert Einstein was a genius.\",\n            \"reason\": \"The context and
      statement are unrelated\",\n            \"verdict\": 0\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"context\": \"Paris
      is the capital and most populous city of France.\",\n    \"statements\": [\n        \"Paris
      is the capital of France.\"\n    ]\n}\nOutput: ", "role": "user"}], "model":
      "gpt-4o", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '3984'
      content-type:
      - application/json
      cookie:
      - __cf_bm=Fe925Teymp5JIu6pPpIl_igozwX9VORuvagP2jECpT8-1742845551-1.0.1.1-voyYTfWz.fi9iVjN3lDCOeGlZiWTYaZ_zZ5ykqn0etupZbYGZfPhmEXtB9Drzw6AMrwtCMi0xeF_1tOuoOz0tGzMC4FhxI4XoJcR1N6vhRM;
        _cfuvid=9rNwUGO4f5pK0FytLKG6nhLSfegPydBxg1sNybSkSl8-1742845551871-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEi24qYfYhjxNn2ZtMerqwt79bGi3\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742845552,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        {\\n            \\\"statement\\\": \\\"Paris is the capital of
        France.\\\",\\n            \\\"reason\\\": \\\"The context explicitly states
        that Paris is the capital of France.\\\",\\n            \\\"verdict\\\": 1\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null,\n        \"annotations\":
        []\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n
        \   }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 806,\n    \"completion_tokens\":
        56,\n    \"total_tokens\": 862,\n    \"prompt_tokens_details\": {\n      \"cached_tokens\":
        0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_6ec83003ad\"\n}\n"
    headers:
      CF-RAY:
      - 9258abdb6d0d5b4e-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:53 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '1064'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '1789'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999091'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_85a76bfb9a1fe71d3bae8e6d09f00246
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluation", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "metrics": ["faithfulness"], "num_rows": 1, "evaluation_type":
      "SINGLE_TURN", "language": "english"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '205'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 24 Mar 2025 19:45:54 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 2b4cbbd85f7c04a22cdd61a36f389bb0.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - EKs-CkLMEPp_8vOTidY-hUypQbHeB2kdojJ0crPLowVj8ZthLI4jNw==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-0
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "is_completed": true}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '124'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 24 Mar 2025 19:45:54 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 c214d2dc32e7103ec8cfdb215850fe4e.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - eQfDGLtCb2QD33uGJ0AT25-EakDkRC7qsZ5CjOR5599xEYo5Ek5ooA==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-0
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 1024, "messages": [{"role": "user", "content": "\n    Use
      the following context to answer the question.\n\n    Context: Paris is the capital
      and most populous city of France.\n\n    Question: What''s the capital of France?\n    "}],
      "model": "claude-3-5-sonnet-20241022", "temperature": 0.7}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      anthropic-version:
      - '2023-06-01'
      connection:
      - keep-alive
      content-length:
      - '305'
      content-type:
      - application/json
      host:
      - api.anthropic.com
      user-agent:
      - Anthropic/Python 0.49.0
      x-api-key:
      - MASKED-API-KEY-FOR-TESTING
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.49.0
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
      x-stainless-timeout:
      - NOT_GIVEN
    method: POST
    uri: https://api.anthropic.com/v1/messages
  response:
    body:
      string: '{"id":"msg_01KeWTrqckp64fymnv7mzVAM","type":"message","role":"assistant","model":"claude-3-5-sonnet-20241022","content":[{"type":"text","text":"According
        to the context, Paris is the capital of France."}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":47,"cache_creation_input_tokens":0,"cache_read_input_tokens":0,"output_tokens":15}}'
    headers:
      CF-RAY:
      - 9258abec1c565b37-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:55 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Robots-Tag:
      - none
      anthropic-organization-id:
      - a2610b2c-742e-455d-9552-6abe105b2a44
      anthropic-ratelimit-input-tokens-limit:
      - '400000'
      anthropic-ratelimit-input-tokens-remaining:
      - '400000'
      anthropic-ratelimit-input-tokens-reset:
      - '2025-03-24T19:45:55Z'
      anthropic-ratelimit-output-tokens-limit:
      - '80000'
      anthropic-ratelimit-output-tokens-remaining:
      - '80000'
      anthropic-ratelimit-output-tokens-reset:
      - '2025-03-24T19:45:55Z'
      anthropic-ratelimit-requests-limit:
      - '4000'
      anthropic-ratelimit-requests-remaining:
      - '3999'
      anthropic-ratelimit-requests-reset:
      - '2025-03-24T19:45:54Z'
      anthropic-ratelimit-tokens-limit:
      - '480000'
      anthropic-ratelimit-tokens-remaining:
      - '480000'
      anthropic-ratelimit-tokens-reset:
      - '2025-03-24T19:45:55Z'
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '358'
      request-id:
      - req_01N6fbBniXXzmFUFyr5Cymuf
      via:
      - 1.1 google
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 1024, "messages": [{"role": "user", "content": "\n    Use
      the following context to answer the question.\n\n    Context: Paris is the capital
      and most populous city of France.\n\n    Question: What''s the capital of France?\n    "}],
      "model": "claude-3-5-sonnet-20241022", "temperature": 0.7}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      anthropic-version:
      - '2023-06-01'
      connection:
      - keep-alive
      content-length:
      - '305'
      content-type:
      - application/json
      host:
      - api.anthropic.com
      user-agent:
      - Anthropic/Python 0.49.0
      x-api-key:
      - MASKED-API-KEY-FOR-TESTING
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.49.0
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
      x-stainless-timeout:
      - NOT_GIVEN
    method: POST
    uri: https://api.anthropic.com/v1/messages
  response:
    body:
      string: '{"id":"msg_019hQPDooytpVnaEEQJaztwa","type":"message","role":"assistant","model":"claude-3-5-sonnet-20241022","content":[{"type":"text","text":"Paris
        is the capital of France."}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":47,"cache_creation_input_tokens":0,"cache_read_input_tokens":0,"output_tokens":10}}'
    headers:
      CF-RAY:
      - 9258abf3bb785b37-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:56 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Robots-Tag:
      - none
      anthropic-organization-id:
      - a2610b2c-742e-455d-9552-6abe105b2a44
      anthropic-ratelimit-input-tokens-limit:
      - '400000'
      anthropic-ratelimit-input-tokens-remaining:
      - '400000'
      anthropic-ratelimit-input-tokens-reset:
      - '2025-03-24T19:45:56Z'
      anthropic-ratelimit-output-tokens-limit:
      - '80000'
      anthropic-ratelimit-output-tokens-remaining:
      - '80000'
      anthropic-ratelimit-output-tokens-reset:
      - '2025-03-24T19:45:56Z'
      anthropic-ratelimit-requests-limit:
      - '4000'
      anthropic-ratelimit-requests-remaining:
      - '3999'
      anthropic-ratelimit-requests-reset:
      - '2025-03-24T19:45:55Z'
      anthropic-ratelimit-tokens-limit:
      - '480000'
      anthropic-ratelimit-tokens-remaining:
      - '480000'
      anthropic-ratelimit-tokens-reset:
      - '2025-03-24T19:45:56Z'
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '332'
      request-id:
      - req_01RLezeCY3G5geGdVTHx6dgd
      via:
      - 1.1 google
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "is_completed": false}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '125'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 24 Mar 2025 19:45:56 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 9fc4896d8cbc5c452f9d8e7d2787ed56.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - k2P1OfBdx1oa-f5cTtoRQc_642h1EPAOWoebYBUwGsPNyZMSpprlJQ==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-0
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a question and an answer, analyze the
      complexity of each sentence in the answer. Break down each sentence into one
      or more fully understandable statements. Ensure that no pronouns are used in
      any statement. Format the outputs in JSON.\nPlease return the output in a JSON
      format that complies with the following schema as specified in JSON Schema:\n{\"properties\":
      {\"statements\": {\"description\": \"The generated statements\", \"items\":
      {\"type\": \"string\"}, \"title\": \"Statements\", \"type\": \"array\"}}, \"required\":
      [\"statements\"], \"title\": \"StatementGeneratorOutput\", \"type\": \"object\"}Do
      not use single quotes in your response but double quotes,properly escaped with
      a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    \"question\":
      \"Who was Albert Einstein and what is he best known for?\",\n    \"answer\":
      \"He was a German-born theoretical physicist, widely acknowledged to be one
      of the greatest and most influential physicists of all time. He was best known
      for developing the theory of relativity, he also made important contributions
      to the development of the theory of quantum mechanics.\"\n}\nOutput: {\n    \"statements\":
      [\n        \"Albert Einstein was a German-born theoretical physicist.\",\n        \"Albert
      Einstein is recognized as one of the greatest and most influential physicists
      of all time.\",\n        \"Albert Einstein was best known for developing the
      theory of relativity.\",\n        \"Albert Einstein also made important contributions
      to the development of the theory of quantum mechanics.\"\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"question\": \"What''s
      the capital of France?\",\n    \"answer\": \"Paris is the capital of France.\"\n}\nOutput:
      ", "role": "user"}], "model": "gpt-4o", "n": 1, "stream": false, "temperature":
      1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '1904'
      content-type:
      - application/json
      cookie:
      - __cf_bm=Y3Ou9N1_BOUcVqYqZxtdjDQCt3p0_esCJQiw3ZlzSHQ-1742845551-1.0.1.1-QzpCBoGVONFJPsqcNMQXNH6l0J460YVChxA3UYhjfdG2FlZRGYY99ZDLckMIUl18n5.H3e2XBREDjG7F3CY0gkmB_r6JouG0_ddO1lHan4c;
        _cfuvid=qCsVZHYt5q.94yhdhOB73OVyRX2.n9I.lUB.Vj46Lf8-1742845551998-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEi28JD6GFN5wY4rc63621H9HmZt4\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742845556,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        \\\"Paris is the capital of France.\\\"\\n    ]\\n}\\n```\",\n
        \       \"refusal\": null,\n        \"annotations\": []\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        357,\n    \"completion_tokens\": 24,\n    \"total_tokens\": 381,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_90d33c15d4\"\n}\n"
    headers:
      CF-RAY:
      - 9258abfa899a5b4e-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:57 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '897'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '360'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999570'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_77ba797dd65fffa1bfadf3a1e7dda113
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a question and an answer, analyze the
      complexity of each sentence in the answer. Break down each sentence into one
      or more fully understandable statements. Ensure that no pronouns are used in
      any statement. Format the outputs in JSON.\nPlease return the output in a JSON
      format that complies with the following schema as specified in JSON Schema:\n{\"properties\":
      {\"statements\": {\"description\": \"The generated statements\", \"items\":
      {\"type\": \"string\"}, \"title\": \"Statements\", \"type\": \"array\"}}, \"required\":
      [\"statements\"], \"title\": \"StatementGeneratorOutput\", \"type\": \"object\"}Do
      not use single quotes in your response but double quotes,properly escaped with
      a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    \"question\":
      \"Who was Albert Einstein and what is he best known for?\",\n    \"answer\":
      \"He was a German-born theoretical physicist, widely acknowledged to be one
      of the greatest and most influential physicists of all time. He was best known
      for developing the theory of relativity, he also made important contributions
      to the development of the theory of quantum mechanics.\"\n}\nOutput: {\n    \"statements\":
      [\n        \"Albert Einstein was a German-born theoretical physicist.\",\n        \"Albert
      Einstein is recognized as one of the greatest and most influential physicists
      of all time.\",\n        \"Albert Einstein was best known for developing the
      theory of relativity.\",\n        \"Albert Einstein also made important contributions
      to the development of the theory of quantum mechanics.\"\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"question\": \"What''s
      the capital of France?\",\n    \"answer\": \"According to the context, Paris
      is the capital of France.\"\n}\nOutput: ", "role": "user"}], "model": "gpt-4o",
      "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '1930'
      content-type:
      - application/json
      cookie:
      - __cf_bm=Y3Ou9N1_BOUcVqYqZxtdjDQCt3p0_esCJQiw3ZlzSHQ-1742845551-1.0.1.1-QzpCBoGVONFJPsqcNMQXNH6l0J460YVChxA3UYhjfdG2FlZRGYY99ZDLckMIUl18n5.H3e2XBREDjG7F3CY0gkmB_r6JouG0_ddO1lHan4c;
        _cfuvid=qCsVZHYt5q.94yhdhOB73OVyRX2.n9I.lUB.Vj46Lf8-1742845551998-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEi29DMRv3oLBT4VIQilBZHZ6nBAg\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742845557,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        \\\"Paris is the capital of France.\\\"\\n    ]\\n}\\n```\",\n
        \       \"refusal\": null,\n        \"annotations\": []\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        362,\n    \"completion_tokens\": 24,\n    \"total_tokens\": 386,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_90d33c15d4\"\n}\n"
    headers:
      CF-RAY:
      - 9258abfa89109322-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:57 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '897'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '411'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999564'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_07d04b13feeabbfe948d91ae16e57790
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704]], "model": "text-embedding-3-large", "encoding_format":
      "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '84'
      content-type:
      - application/json
      cookie:
      - __cf_bm=XSC1F1OALmfRtY4n0H.ONQGemEkbZkdx.OCCfGVg18o-1742845551-1.0.1.1-8baJCBJ82m7QXtMmzliv9upSvIm8g_abGuSKVsnzVotsjxr6RVfjFwVK8REgQS2QA0dPsPV4gJUGXtbjrUJYvmFJLE7DWJQf..Z9FfCadOY;
        _cfuvid=nsXfAqQwPPE3uETf7ALcE2mX7dCRlRq_AtbGvMcBuj0-1742845551927-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        1,\n    \"total_tokens\": 1\n  }\n}\n"
    headers:
      CF-RAY:
      - 9258abfa882a0d4f-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:57 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '128'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-65cbfdf449-mjfnr
      x-envoy-upstream-service-time:
      - '84'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999998'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_5eedece370aeb00eeed8d4678e2ce0b1
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704]], "model": "text-embedding-3-large", "encoding_format":
      "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '84'
      content-type:
      - application/json
      cookie:
      - __cf_bm=XSC1F1OALmfRtY4n0H.ONQGemEkbZkdx.OCCfGVg18o-1742845551-1.0.1.1-8baJCBJ82m7QXtMmzliv9upSvIm8g_abGuSKVsnzVotsjxr6RVfjFwVK8REgQS2QA0dPsPV4gJUGXtbjrUJYvmFJLE7DWJQf..Z9FfCadOY;
        _cfuvid=nsXfAqQwPPE3uETf7ALcE2mX7dCRlRq_AtbGvMcBuj0-1742845551927-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        1,\n    \"total_tokens\": 1\n  }\n}\n"
    headers:
      CF-RAY:
      - 9258abfa8cf328d0-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:57 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '276'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-84d4976dd6-5n9rq
      x-envoy-upstream-service-time:
      - '224'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999998'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_0ffc0daa5970ff5ff54a7a3ff6f636a2
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\nPlease
      return the output in a JSON format that complies with the following schema as
      specified in JSON Schema:\n{\"$defs\": {\"StatementFaithfulnessAnswer\": {\"properties\":
      {\"statement\": {\"description\": \"the original statement, word-by-word\",
      \"title\": \"Statement\", \"type\": \"string\"}, \"reason\": {\"description\":
      \"the reason of the verdict\", \"title\": \"Reason\", \"type\": \"string\"},
      \"verdict\": {\"description\": \"the verdict(0/1) of the faithfulness.\", \"title\":
      \"Verdict\", \"type\": \"integer\"}}, \"required\": [\"statement\", \"reason\",
      \"verdict\"], \"title\": \"StatementFaithfulnessAnswer\", \"type\": \"object\"}},
      \"properties\": {\"statements\": {\"items\": {\"$ref\": \"#/$defs/StatementFaithfulnessAnswer\"},
      \"title\": \"Statements\", \"type\": \"array\"}}, \"required\": [\"statements\"],
      \"title\": \"NLIStatementOutput\", \"type\": \"object\"}Do not use single quotes
      in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample
      1\nInput: {\n    \"context\": \"John is a student at XYZ University. He is pursuing
      a degree in Computer Science. He is enrolled in several courses this semester,
      including Data Structures, Algorithms, and Database Management. John is a diligent
      student and spends a significant amount of time studying and completing assignments.
      He often stays late in the library to work on his projects.\",\n    \"statements\":
      [\n        \"John is majoring in Biology.\",\n        \"John is taking a course
      on Artificial Intelligence.\",\n        \"John is a dedicated student.\",\n        \"John
      has a part-time job.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"John is majoring in Biology.\",\n            \"reason\": \"John''s major is
      explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is taking a course on Artificial Intelligence.\",\n            \"reason\":
      \"The context mentions the courses John is currently enrolled in, and Artificial
      Intelligence is not mentioned. Therefore, it cannot be deduced that John is
      taking a course on AI.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is a dedicated student.\",\n            \"reason\": \"The context states
      that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\",\n            \"verdict\": 1\n        },\n        {\n            \"statement\":
      \"John has a part-time job.\",\n            \"reason\": \"There is no information
      given in the context about John having a part-time job.\",\n            \"verdict\":
      0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    \"context\": \"Photosynthesis
      is a process used by plants, algae, and certain bacteria to convert light energy
      into chemical energy.\",\n    \"statements\": [\n        \"Albert Einstein was
      a genius.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"Albert Einstein was a genius.\",\n            \"reason\": \"The context and
      statement are unrelated\",\n            \"verdict\": 0\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"context\": \"Paris
      is the capital and most populous city of France.\",\n    \"statements\": [\n        \"Paris
      is the capital of France.\"\n    ]\n}\nOutput: ", "role": "user"}], "model":
      "gpt-4o", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '3984'
      content-type:
      - application/json
      cookie:
      - __cf_bm=Y3Ou9N1_BOUcVqYqZxtdjDQCt3p0_esCJQiw3ZlzSHQ-1742845551-1.0.1.1-QzpCBoGVONFJPsqcNMQXNH6l0J460YVChxA3UYhjfdG2FlZRGYY99ZDLckMIUl18n5.H3e2XBREDjG7F3CY0gkmB_r6JouG0_ddO1lHan4c;
        _cfuvid=qCsVZHYt5q.94yhdhOB73OVyRX2.n9I.lUB.Vj46Lf8-1742845551998-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEi29U1TaL6jIRf95iOgXSkMi4U0z\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742845557,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        {\\n            \\\"statement\\\": \\\"Paris is the capital of
        France.\\\",\\n            \\\"reason\\\": \\\"The context explicitly states
        that Paris is the capital of France.\\\",\\n            \\\"verdict\\\": 1\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null,\n        \"annotations\":
        []\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n
        \   }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 806,\n    \"completion_tokens\":
        56,\n    \"total_tokens\": 862,\n    \"prompt_tokens_details\": {\n      \"cached_tokens\":
        0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_90d33c15d4\"\n}\n"
    headers:
      CF-RAY:
      - 9258abfdec4e5b4e-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:58 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '1064'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '677'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999091'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_76dea524a9e4bfe6a5589c20950af7ef
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704, 374, 279, 6864, 315, 9822, 13]], "model": "text-embedding-3-large",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '115'
      content-type:
      - application/json
      cookie:
      - __cf_bm=XSC1F1OALmfRtY4n0H.ONQGemEkbZkdx.OCCfGVg18o-1742845551-1.0.1.1-8baJCBJ82m7QXtMmzliv9upSvIm8g_abGuSKVsnzVotsjxr6RVfjFwVK8REgQS2QA0dPsPV4gJUGXtbjrUJYvmFJLE7DWJQf..Z9FfCadOY;
        _cfuvid=nsXfAqQwPPE3uETf7ALcE2mX7dCRlRq_AtbGvMcBuj0-1742845551927-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        7,\n    \"total_tokens\": 7\n  }\n}\n"
    headers:
      CF-RAY:
      - 9258ac000a7c28d0-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:58 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '178'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-678fbc785b-jk6fl
      x-envoy-upstream-service-time:
      - '148'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999993'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_a99b1b40c8f696de9559c0157ff3dbcd
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\nPlease
      return the output in a JSON format that complies with the following schema as
      specified in JSON Schema:\n{\"$defs\": {\"StatementFaithfulnessAnswer\": {\"properties\":
      {\"statement\": {\"description\": \"the original statement, word-by-word\",
      \"title\": \"Statement\", \"type\": \"string\"}, \"reason\": {\"description\":
      \"the reason of the verdict\", \"title\": \"Reason\", \"type\": \"string\"},
      \"verdict\": {\"description\": \"the verdict(0/1) of the faithfulness.\", \"title\":
      \"Verdict\", \"type\": \"integer\"}}, \"required\": [\"statement\", \"reason\",
      \"verdict\"], \"title\": \"StatementFaithfulnessAnswer\", \"type\": \"object\"}},
      \"properties\": {\"statements\": {\"items\": {\"$ref\": \"#/$defs/StatementFaithfulnessAnswer\"},
      \"title\": \"Statements\", \"type\": \"array\"}}, \"required\": [\"statements\"],
      \"title\": \"NLIStatementOutput\", \"type\": \"object\"}Do not use single quotes
      in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample
      1\nInput: {\n    \"context\": \"John is a student at XYZ University. He is pursuing
      a degree in Computer Science. He is enrolled in several courses this semester,
      including Data Structures, Algorithms, and Database Management. John is a diligent
      student and spends a significant amount of time studying and completing assignments.
      He often stays late in the library to work on his projects.\",\n    \"statements\":
      [\n        \"John is majoring in Biology.\",\n        \"John is taking a course
      on Artificial Intelligence.\",\n        \"John is a dedicated student.\",\n        \"John
      has a part-time job.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"John is majoring in Biology.\",\n            \"reason\": \"John''s major is
      explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is taking a course on Artificial Intelligence.\",\n            \"reason\":
      \"The context mentions the courses John is currently enrolled in, and Artificial
      Intelligence is not mentioned. Therefore, it cannot be deduced that John is
      taking a course on AI.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is a dedicated student.\",\n            \"reason\": \"The context states
      that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\",\n            \"verdict\": 1\n        },\n        {\n            \"statement\":
      \"John has a part-time job.\",\n            \"reason\": \"There is no information
      given in the context about John having a part-time job.\",\n            \"verdict\":
      0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    \"context\": \"Photosynthesis
      is a process used by plants, algae, and certain bacteria to convert light energy
      into chemical energy.\",\n    \"statements\": [\n        \"Albert Einstein was
      a genius.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"Albert Einstein was a genius.\",\n            \"reason\": \"The context and
      statement are unrelated\",\n            \"verdict\": 0\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"context\": \"Paris
      is the capital and most populous city of France.\",\n    \"statements\": [\n        \"Paris
      is the capital of France.\"\n    ]\n}\nOutput: ", "role": "user"}], "model":
      "gpt-4o", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '3984'
      content-type:
      - application/json
      cookie:
      - __cf_bm=Y3Ou9N1_BOUcVqYqZxtdjDQCt3p0_esCJQiw3ZlzSHQ-1742845551-1.0.1.1-QzpCBoGVONFJPsqcNMQXNH6l0J460YVChxA3UYhjfdG2FlZRGYY99ZDLckMIUl18n5.H3e2XBREDjG7F3CY0gkmB_r6JouG0_ddO1lHan4c;
        _cfuvid=qCsVZHYt5q.94yhdhOB73OVyRX2.n9I.lUB.Vj46Lf8-1742845551998-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-read-timeout:
      - '120.0'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-BEi2956Qd4SjTKA5oDQqop8CnbnnJ\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1742845557,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        {\\n            \\\"statement\\\": \\\"Paris is the capital of
        France.\\\",\\n            \\\"reason\\\": \\\"The context explicitly states
        that Paris is the capital of France.\\\",\\n            \\\"verdict\\\": 1\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null,\n        \"annotations\":
        []\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n
        \   }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 806,\n    \"completion_tokens\":
        56,\n    \"total_tokens\": 862,\n    \"prompt_tokens_details\": {\n      \"cached_tokens\":
        0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\":
        \"default\",\n  \"system_fingerprint\": \"fp_90d33c15d4\"\n}\n"
    headers:
      CF-RAY:
      - 9258abfe6a789322-VIE
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:58 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '1064'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '702'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '50000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '49999'
      x-ratelimit-remaining-tokens:
      - '149999091'
      x-ratelimit-reset-requests:
      - 1ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_1f7eb48d50f4c9f6ab46195355dcceb0
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[11439, 311, 279, 2317, 11, 12366, 374, 279, 6864, 315, 9822,
      13]], "model": "text-embedding-3-large", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '142'
      content-type:
      - application/json
      cookie:
      - __cf_bm=XSC1F1OALmfRtY4n0H.ONQGemEkbZkdx.OCCfGVg18o-1742845551-1.0.1.1-8baJCBJ82m7QXtMmzliv9upSvIm8g_abGuSKVsnzVotsjxr6RVfjFwVK8REgQS2QA0dPsPV4gJUGXtbjrUJYvmFJLE7DWJQf..Z9FfCadOY;
        _cfuvid=nsXfAqQwPPE3uETf7ALcE2mX7dCRlRq_AtbGvMcBuj0-1742845551927-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.68.2
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.68.2
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        12,\n    \"total_tokens\": 12\n  }\n}\n"
    headers:
      CF-RAY:
      - 9258abffc90d0d4f-SOF
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Mar 2025 19:45:58 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '445'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-7bb669f799-z654z
      x-envoy-upstream-service-time:
      - '325'
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999987'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_e78a0cab85224adcedf5aa6085725c3f
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluation", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "metrics": ["faithfulness"], "num_rows": 2, "evaluation_type":
      "SINGLE_TURN", "language": "english"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '205'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 24 Mar 2025 19:45:58 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 84494925196597f7a73e04b453070b2e.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - Lfrd1ZutaPtm9JikSk5erHuWFsPX1WShXtsKHPZPGOKLnmuwT6rEBQ==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-0
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluation", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "metrics": ["semantic_similarity"], "num_rows": 2,
      "evaluation_type": "SINGLE_TURN", "language": ""}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '205'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 24 Mar 2025 19:45:59 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 3bc7ecd5aee04a4d3c660b552dad8d14.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - zcCs1tJ8DPct6NiLH1CeGgKuYMu4pVrrJM-VM46Vhy651VeGbI0eVA==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-0
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "is_completed": true}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '124'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 24 Mar 2025 19:45:59 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 2b4cbbd85f7c04a22cdd61a36f389bb0.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - kVhtTteoiFXdHHPmGs9L3mWtvotZdXy3ph7iKbKx1fYgXLMBE4g8Jw==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-0
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-f7d70586fdf1407787b7ed9c4c84be26",
      "ragas_version": "0.2.14", "is_completed": true}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '124'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 24 Mar 2025 19:45:59 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 30f34c4ade43b29ffd4cdc2465cd5c42.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - 0qpoa1zwXOr4T2-rRyMeYXth6dP3tMuoEgerpADVPNwZ4ROE_ciS-g==
      X-Amz-Cf-Pop:
      - OTP50-P1
      X-Backend-Id:
      - jitsu-edge-0
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
version: 1
