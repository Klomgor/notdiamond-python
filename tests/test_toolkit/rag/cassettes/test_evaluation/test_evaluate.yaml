interactions:
- request:
    body: '{"event_type": "evaluate", "user_id": "a-ea5f51235ac34721951129d4d99e6ae7",
      "is_completed": false}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '98'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 21 Nov 2024 19:54:26 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 1642f1de8382cfb040eb971057a5597a.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - qbasNdKdaV1ABKgOIO3AulFKnbUOTYABFbUV2j4kXosCPvw2lIjHUA==
      X-Amz-Cf-Pop:
      - JFK52-P10
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-ea5f51235ac34721951129d4d99e6ae7",
      "is_completed": false}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '98'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 21 Nov 2024 19:54:26 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 fcea4c04b43e1d3de9440d97074d489a.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - 8CXGzwy7ni1buiZyUXqj6VncQebk7YGtcHhy9wTpFIsOxj100Y2LAQ==
      X-Amz-Cf-Pop:
      - JFK52-P10
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704]], "model": "text-embedding-3-large", "encoding_format":
      "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '84'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        1,\n    \"total_tokens\": 1\n  }\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b4c68598c41-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:26 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=XnMr7csbbaxhtBYRSIXK1wsl4vHgZPHDdU8cP.PDWjU-1732218866-1.0.1.1-booUywayb25Tk0qncjhyqrOM3AmmqFysQVbI_gcFhqTgXFZfS5jtQcoDItghuWGFCkrvwk9ze4eo0vI3YJyNxw;
        path=/; expires=Thu, 21-Nov-24 20:24:26 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=tdbMoHA.ftMOHEEeKqRdqIz7IHkq.Sdikq.E2m7Rbso-1732218866858-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '47'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999998'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_f006f5b202dbe356d242a257e5ee59b3
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704]], "model": "text-embedding-3-large", "encoding_format":
      "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '84'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        1,\n    \"total_tokens\": 1\n  }\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b4c8fd7420d-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:26 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=uPhR1wV.Fmi8zA9RzlF890OM5ACguvBBGZZ.VUMYfuA-1732218866-1.0.1.1-VnlLmUZY6HevHkNK9jDP0hA2U4uqmiqbepis0YKX_BgBCfs262fcXrQ561VUEWvqFSAgGy0Q2lH3itbuhTgrsg;
        path=/; expires=Thu, 21-Nov-24 20:24:26 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=Uss7Ee657AW95jd08vhlVpunQjfw3x52ONG_TIfbpfQ-1732218866901-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '126'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999999'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_1baaf680c6404c78cb0dfabba8e1c947
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[791, 6864, 315, 9822, 374, 12366, 13]], "model": "text-embedding-3-large",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '115'
      content-type:
      - application/json
      cookie:
      - __cf_bm=uPhR1wV.Fmi8zA9RzlF890OM5ACguvBBGZZ.VUMYfuA-1732218866-1.0.1.1-VnlLmUZY6HevHkNK9jDP0hA2U4uqmiqbepis0YKX_BgBCfs262fcXrQ561VUEWvqFSAgGy0Q2lH3itbuhTgrsg;
        _cfuvid=Uss7Ee657AW95jd08vhlVpunQjfw3x52ONG_TIfbpfQ-1732218866901-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        7,\n    \"total_tokens\": 7\n  }\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b4e7b3f8c41-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:27 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '64'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999993'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_1ed831fc3096f3dd800345cd01c8ecee
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[791, 6864, 315, 9822, 374, 12366, 13]], "model": "text-embedding-3-large",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '115'
      content-type:
      - application/json
      cookie:
      - __cf_bm=uPhR1wV.Fmi8zA9RzlF890OM5ACguvBBGZZ.VUMYfuA-1732218866-1.0.1.1-VnlLmUZY6HevHkNK9jDP0hA2U4uqmiqbepis0YKX_BgBCfs262fcXrQ561VUEWvqFSAgGy0Q2lH3itbuhTgrsg;
        _cfuvid=Uss7Ee657AW95jd08vhlVpunQjfw3x52ONG_TIfbpfQ-1732218866901-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        7,\n    \"total_tokens\": 7\n  }\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b4eab24420d-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:29 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '295'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999993'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_843990202a7951ee215f0b1a8fb40c36
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a question, an answer, and sentences from
      the answer analyze the complexity of each sentence given under ''sentences''
      and break down each sentence into one or more fully understandable statements
      while also ensuring no pronouns are used in each statement. Format the outputs
      in JSON.\nPlease return the output in a JSON format that complies with the following
      schema as specified in JSON Schema:\n{''$defs'': {''SentenceComponents'': {''properties'':
      {''sentence_index'': {''description'': ''The index of the sentence'', ''title'':
      ''Sentence Index'', ''type'': ''integer''}, ''simpler_statements'': {''description'':
      ''A list of simpler statements that can be directly inferred from the context'',
      ''items'': {''type'': ''string''}, ''title'': ''Simpler Statements'', ''type'':
      ''array''}}, ''required'': [''sentence_index'', ''simpler_statements''], ''title'':
      ''SentenceComponents'', ''type'': ''object''}}, ''properties'': {''sentences'':
      {''description'': ''A list of sentences and their simpler versions'', ''items'':
      {''$ref'': ''#/$defs/SentenceComponents''}, ''title'': ''Sentences'', ''type'':
      ''array''}}, ''required'': [''sentences''], ''title'': ''SentencesSimplified'',
      ''type'': ''object''}\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    \"question\":
      \"Who was Albert Einstein and what is he best known for?\",\n    \"answer\":
      \"He was a German-born theoretical physicist, widely acknowledged to be one
      of the greatest and most influential physicists of all time. He was best known
      for developing the theory of relativity, he also made important contributions
      to the development of the theory of quantum mechanics.\",\n    \"sentences\":
      {\n        \"0\": \"He was a German-born theoretical physicist, widely acknowledged
      to be one of the greatest and most influential physicists of all time.\",\n        \"1\":
      \"He was best known for developing the theory of relativity, he also made important
      contributions to the development of the theory of quantum mechanics.\"\n    }\n}\nOutput:
      {\n    \"sentences\": [\n        {\n            \"sentence_index\": 0,\n            \"simpler_statements\":
      [\n                \"Albert Einstein was a German-born theoretical physicist.\",\n                \"Albert
      Einstein is recognized as one of the greatest and most influential physicists
      of all time.\"\n            ]\n        },\n        {\n            \"sentence_index\":
      1,\n            \"simpler_statements\": [\n                \"Albert Einstein
      was best known for developing the theory of relativity.\",\n                \"Albert
      Einstein also made important contributions to the development of the theory
      of quantum mechanics.\"\n            ]\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"question\": \"What''s
      the capital of France?\",\n    \"answer\": \"The capital of France is Paris.\",\n    \"sentences\":
      {\n        \"0\": \"The capital of France is Paris.\"\n    }\n}\nOutput: ",
      "role": "user"}], "model": "gpt-4o", "n": 1, "stream": false, "temperature":
      1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3011'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-AW7XuGmBKXkEVKZeAk990TNC0xt93\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1732218866,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"sentences\\\":
        [\\n        {\\n            \\\"sentence_index\\\": 0,\\n            \\\"simpler_statements\\\":
        [\\n                \\\"Paris is the capital of France.\\\"\\n            ]\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        605,\n    \"completion_tokens\": 45,\n    \"total_tokens\": 650,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"system_fingerprint\":
        \"fp_7f6be3efb0\"\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b4c882580da-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:32 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=jZzjtjRy0YzmdGijrBh9cIXPKbkS9AzQlshNAHJ7RCE-1732218872-1.0.1.1-CFhwSTyxNiDIVPmcUqTNGpqU2WVYtAilVE9bhU.ZewQzlMcscMPFKy8_qfySX89vcJTQJ7QmyX5vtFlckZ0U5A;
        path=/; expires=Thu, 21-Nov-24 20:24:32 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=yEmCp.f9YYvQZFJrcNNnQGQSSpl7x2NhpYVESnOWp4A-1732218872466-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '960'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '5754'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9998'
      x-ratelimit-remaining-tokens:
      - '29998967'
      x-ratelimit-reset-requests:
      - 11ms
      x-ratelimit-reset-tokens:
      - 2ms
      x-request-id:
      - req_eb142fa92339e31e9d05dacbc8c253d8
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a question, an answer, and sentences from
      the answer analyze the complexity of each sentence given under ''sentences''
      and break down each sentence into one or more fully understandable statements
      while also ensuring no pronouns are used in each statement. Format the outputs
      in JSON.\nPlease return the output in a JSON format that complies with the following
      schema as specified in JSON Schema:\n{''$defs'': {''SentenceComponents'': {''properties'':
      {''sentence_index'': {''description'': ''The index of the sentence'', ''title'':
      ''Sentence Index'', ''type'': ''integer''}, ''simpler_statements'': {''description'':
      ''A list of simpler statements that can be directly inferred from the context'',
      ''items'': {''type'': ''string''}, ''title'': ''Simpler Statements'', ''type'':
      ''array''}}, ''required'': [''sentence_index'', ''simpler_statements''], ''title'':
      ''SentenceComponents'', ''type'': ''object''}}, ''properties'': {''sentences'':
      {''description'': ''A list of sentences and their simpler versions'', ''items'':
      {''$ref'': ''#/$defs/SentenceComponents''}, ''title'': ''Sentences'', ''type'':
      ''array''}}, ''required'': [''sentences''], ''title'': ''SentencesSimplified'',
      ''type'': ''object''}\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    \"question\":
      \"Who was Albert Einstein and what is he best known for?\",\n    \"answer\":
      \"He was a German-born theoretical physicist, widely acknowledged to be one
      of the greatest and most influential physicists of all time. He was best known
      for developing the theory of relativity, he also made important contributions
      to the development of the theory of quantum mechanics.\",\n    \"sentences\":
      {\n        \"0\": \"He was a German-born theoretical physicist, widely acknowledged
      to be one of the greatest and most influential physicists of all time.\",\n        \"1\":
      \"He was best known for developing the theory of relativity, he also made important
      contributions to the development of the theory of quantum mechanics.\"\n    }\n}\nOutput:
      {\n    \"sentences\": [\n        {\n            \"sentence_index\": 0,\n            \"simpler_statements\":
      [\n                \"Albert Einstein was a German-born theoretical physicist.\",\n                \"Albert
      Einstein is recognized as one of the greatest and most influential physicists
      of all time.\"\n            ]\n        },\n        {\n            \"sentence_index\":
      1,\n            \"simpler_statements\": [\n                \"Albert Einstein
      was best known for developing the theory of relativity.\",\n                \"Albert
      Einstein also made important contributions to the development of the theory
      of quantum mechanics.\"\n            ]\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"question\": \"What''s
      the capital of France?\",\n    \"answer\": \"The capital of France is Paris.\",\n    \"sentences\":
      {\n        \"0\": \"The capital of France is Paris.\"\n    }\n}\nOutput: ",
      "role": "user"}], "model": "gpt-4o", "n": 1, "stream": false, "temperature":
      1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3011'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-AW7XuEVaC0gOXNGZqvc4DuuBmuicc\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1732218866,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"sentences\\\":
        [\\n        {\\n            \\\"sentence_index\\\": 0,\\n            \\\"simpler_statements\\\":
        [\\n                \\\"Paris is the capital of France.\\\"\\n            ]\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        605,\n    \"completion_tokens\": 45,\n    \"total_tokens\": 650,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"system_fingerprint\":
        \"fp_7f6be3efb0\"\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b4c8aa94381-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:32 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=omtkn6oOnnBQqB37JIcn9NSBzFPZVrPAgRkKg5JqKMI-1732218872-1.0.1.1-M1KjJY_zKhuorseH0l_eXDvJyO1BMiTGHQ3Aw5CnIOC7f7aEH7ALAegccOSNxgXYiXNCs8ZEf_n4EL27jCu0xg;
        path=/; expires=Thu, 21-Nov-24 20:24:32 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=6hJMVDW0qM2hT5rj0.fdI0f5FWiqbPbvKGNPoFhZJro-1732218872990-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '960'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '6277'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29999281'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_7e2863da2d490b54af9154c883cd4e67
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\nPlease
      return the output in a JSON format that complies with the following schema as
      specified in JSON Schema:\n{''$defs'': {''StatementFaithfulnessAnswer'': {''properties'':
      {''statement'': {''description'': ''the original statement, word-by-word'',
      ''title'': ''Statement'', ''type'': ''string''}, ''reason'': {''description'':
      ''the reason of the verdict'', ''title'': ''Reason'', ''type'': ''string''},
      ''verdict'': {''description'': ''the verdict(0/1) of the faithfulness.'', ''title'':
      ''Verdict'', ''type'': ''integer''}}, ''required'': [''statement'', ''reason'',
      ''verdict''], ''title'': ''StatementFaithfulnessAnswer'', ''type'': ''object''}},
      ''properties'': {''statements'': {''items'': {''$ref'': ''#/$defs/StatementFaithfulnessAnswer''},
      ''title'': ''Statements'', ''type'': ''array''}}, ''required'': [''statements''],
      ''title'': ''NLIStatementOutput'', ''type'': ''object''}\n\n--------EXAMPLES-----------\nExample
      1\nInput: {\n    \"context\": \"John is a student at XYZ University. He is pursuing
      a degree in Computer Science. He is enrolled in several courses this semester,
      including Data Structures, Algorithms, and Database Management. John is a diligent
      student and spends a significant amount of time studying and completing assignments.
      He often stays late in the library to work on his projects.\",\n    \"statements\":
      [\n        \"John is majoring in Biology.\",\n        \"John is taking a course
      on Artificial Intelligence.\",\n        \"John is a dedicated student.\",\n        \"John
      has a part-time job.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"John is majoring in Biology.\",\n            \"reason\": \"John''s major is
      explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is taking a course on Artificial Intelligence.\",\n            \"reason\":
      \"The context mentions the courses John is currently enrolled in, and Artificial
      Intelligence is not mentioned. Therefore, it cannot be deduced that John is
      taking a course on AI.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is a dedicated student.\",\n            \"reason\": \"The context states
      that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\",\n            \"verdict\": 1\n        },\n        {\n            \"statement\":
      \"John has a part-time job.\",\n            \"reason\": \"There is no information
      given in the context about John having a part-time job.\",\n            \"verdict\":
      0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    \"context\": \"Photosynthesis
      is a process used by plants, algae, and certain bacteria to convert light energy
      into chemical energy.\",\n    \"statements\": [\n        \"Albert Einstein was
      a genius.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"Albert Einstein was a genius.\",\n            \"reason\": \"The context and
      statement are unrelated\",\n            \"verdict\": 0\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"context\": \"Paris
      is the capital and most populous city of France.\",\n    \"statements\": [\n        \"Paris
      is the capital of France.\"\n    ]\n}\nOutput: ", "role": "user"}], "model":
      "gpt-4o", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3796'
      content-type:
      - application/json
      cookie:
      - __cf_bm=jZzjtjRy0YzmdGijrBh9cIXPKbkS9AzQlshNAHJ7RCE-1732218872-1.0.1.1-CFhwSTyxNiDIVPmcUqTNGpqU2WVYtAilVE9bhU.ZewQzlMcscMPFKy8_qfySX89vcJTQJ7QmyX5vtFlckZ0U5A;
        _cfuvid=yEmCp.f9YYvQZFJrcNNnQGQSSpl7x2NhpYVESnOWp4A-1732218872466-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-AW7Y0oNSV95xmh7XzzCqxQb8626P7\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1732218872,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        {\\n            \\\"statement\\\": \\\"Paris is the capital of
        France.\\\",\\n            \\\"reason\\\": \\\"The context explicitly states
        that Paris is the capital of France.\\\",\\n            \\\"verdict\\\": 1\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        786,\n    \"completion_tokens\": 55,\n    \"total_tokens\": 841,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"system_fingerprint\":
        \"fp_831e067d82\"\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b717f0980da-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:33 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '1008'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '1278'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29999098'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_024cf5117b1e4c005c9aeeb76cef0962
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\nPlease
      return the output in a JSON format that complies with the following schema as
      specified in JSON Schema:\n{''$defs'': {''StatementFaithfulnessAnswer'': {''properties'':
      {''statement'': {''description'': ''the original statement, word-by-word'',
      ''title'': ''Statement'', ''type'': ''string''}, ''reason'': {''description'':
      ''the reason of the verdict'', ''title'': ''Reason'', ''type'': ''string''},
      ''verdict'': {''description'': ''the verdict(0/1) of the faithfulness.'', ''title'':
      ''Verdict'', ''type'': ''integer''}}, ''required'': [''statement'', ''reason'',
      ''verdict''], ''title'': ''StatementFaithfulnessAnswer'', ''type'': ''object''}},
      ''properties'': {''statements'': {''items'': {''$ref'': ''#/$defs/StatementFaithfulnessAnswer''},
      ''title'': ''Statements'', ''type'': ''array''}}, ''required'': [''statements''],
      ''title'': ''NLIStatementOutput'', ''type'': ''object''}\n\n--------EXAMPLES-----------\nExample
      1\nInput: {\n    \"context\": \"John is a student at XYZ University. He is pursuing
      a degree in Computer Science. He is enrolled in several courses this semester,
      including Data Structures, Algorithms, and Database Management. John is a diligent
      student and spends a significant amount of time studying and completing assignments.
      He often stays late in the library to work on his projects.\",\n    \"statements\":
      [\n        \"John is majoring in Biology.\",\n        \"John is taking a course
      on Artificial Intelligence.\",\n        \"John is a dedicated student.\",\n        \"John
      has a part-time job.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"John is majoring in Biology.\",\n            \"reason\": \"John''s major is
      explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is taking a course on Artificial Intelligence.\",\n            \"reason\":
      \"The context mentions the courses John is currently enrolled in, and Artificial
      Intelligence is not mentioned. Therefore, it cannot be deduced that John is
      taking a course on AI.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is a dedicated student.\",\n            \"reason\": \"The context states
      that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\",\n            \"verdict\": 1\n        },\n        {\n            \"statement\":
      \"John has a part-time job.\",\n            \"reason\": \"There is no information
      given in the context about John having a part-time job.\",\n            \"verdict\":
      0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    \"context\": \"Photosynthesis
      is a process used by plants, algae, and certain bacteria to convert light energy
      into chemical energy.\",\n    \"statements\": [\n        \"Albert Einstein was
      a genius.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"Albert Einstein was a genius.\",\n            \"reason\": \"The context and
      statement are unrelated\",\n            \"verdict\": 0\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"context\": \"Paris
      is the capital and most populous city of France.\",\n    \"statements\": [\n        \"Paris
      is the capital of France.\"\n    ]\n}\nOutput: ", "role": "user"}], "model":
      "gpt-4o", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3796'
      content-type:
      - application/json
      cookie:
      - __cf_bm=omtkn6oOnnBQqB37JIcn9NSBzFPZVrPAgRkKg5JqKMI-1732218872-1.0.1.1-M1KjJY_zKhuorseH0l_eXDvJyO1BMiTGHQ3Aw5CnIOC7f7aEH7ALAegccOSNxgXYiXNCs8ZEf_n4EL27jCu0xg;
        _cfuvid=6hJMVDW0qM2hT5rj0.fdI0f5FWiqbPbvKGNPoFhZJro-1732218872990-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-AW7Y1qldQkXCwHAdRhFGPNxvEmBc6\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1732218873,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        {\\n            \\\"statement\\\": \\\"Paris is the capital of
        France.\\\",\\n            \\\"reason\\\": \\\"The context explicitly states
        that Paris is the capital of France.\\\",\\n            \\\"verdict\\\": 1\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        786,\n    \"completion_tokens\": 55,\n    \"total_tokens\": 841,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"system_fingerprint\":
        \"fp_831e067d82\"\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b744ebf4381-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:34 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '1008'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '1316'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29999098'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_3938921ebf799ba6ad97fef069d3295a
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluation", "user_id": "a-ea5f51235ac34721951129d4d99e6ae7",
      "metrics": ["faithfulness", "semantic_similarity"], "evaluation_mode": "", "num_rows":
      2, "language": "english", "in_ci": false}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '206'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 21 Nov 2024 19:54:34 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 0682f7730795782bcea4e80a73e52dc0.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - HTABdW7BNZZq6nL4GFAPpFM4DL70NwWd4scJIW_zYJDQxWShN7aPdQ==
      X-Amz-Cf-Pop:
      - JFK52-P10
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-ea5f51235ac34721951129d4d99e6ae7",
      "is_completed": true}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '97'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 21 Nov 2024 19:54:34 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 be0c2da195113bc0385ed0faca92ed64.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - Ad3eGCcXRGdlfCgzG2WwBJa9bylc3oy-B7wo4fcdL9m2J64zjj00EA==
      X-Amz-Cf-Pop:
      - JFK52-P10
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 1024, "messages": [{"role": "user", "content": "\n    Use
      the following context to answer the question.\n\n    Context: Paris is the capital
      and most populous city of France.\n\n    Question: What''s the capital of France?\n    "}],
      "model": "claude-3-5-sonnet-20241022", "temperature": 0.7}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      anthropic-version:
      - '2023-06-01'
      connection:
      - keep-alive
      content-length:
      - '305'
      content-type:
      - application/json
      host:
      - api.anthropic.com
      user-agent:
      - Anthropic/Python 0.39.0
      x-api-key:
      - REDACTED
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.39.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.anthropic.com/v1/messages
  response:
    body:
      string: '{"id":"msg_01HkZPvoPpjqr8257jVJzFJM","type":"message","role":"assistant","model":"claude-3-5-sonnet-20241022","content":[{"type":"text","text":"Paris
        is the capital of France."}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":47,"output_tokens":10}}'
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b8079b11839-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:35 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Robots-Tag:
      - none
      anthropic-ratelimit-requests-limit:
      - '4000'
      anthropic-ratelimit-requests-remaining:
      - '3999'
      anthropic-ratelimit-requests-reset:
      - '2024-11-21T19:54:34Z'
      content-length:
      - '272'
      request-id:
      - req_01FFGhi7PtobYSurf8PuJL76
      via:
      - 1.1 google
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 1024, "messages": [{"role": "user", "content": "\n    Use
      the following context to answer the question.\n\n    Context: Paris is the capital
      and most populous city of France.\n\n    Question: What''s the capital of France?\n    "}],
      "model": "claude-3-5-sonnet-20241022", "temperature": 0.7}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      anthropic-version:
      - '2023-06-01'
      connection:
      - keep-alive
      content-length:
      - '305'
      content-type:
      - application/json
      host:
      - api.anthropic.com
      user-agent:
      - Anthropic/Python 0.39.0
      x-api-key:
      - REDACTED
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.39.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.anthropic.com/v1/messages
  response:
    body:
      string: '{"id":"msg_0136RX9oR2ixX71e7ZS5H91o","type":"message","role":"assistant","model":"claude-3-5-sonnet-20241022","content":[{"type":"text","text":"Paris
        is the capital of France."}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":47,"output_tokens":10}}'
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b835d7f1839-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:35 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Robots-Tag:
      - none
      anthropic-ratelimit-requests-limit:
      - '4000'
      anthropic-ratelimit-requests-remaining:
      - '3999'
      anthropic-ratelimit-requests-reset:
      - '2024-11-21T19:54:35Z'
      content-length:
      - '272'
      request-id:
      - req_01MCtgHLk5rmTiVzqh7u6fjo
      via:
      - 1.1 google
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-ea5f51235ac34721951129d4d99e6ae7",
      "is_completed": false}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '98'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 21 Nov 2024 19:54:35 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 b274a8f17ac92a47c0fa7e31e5599392.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - UP_09a4Non4-PzPu-RKvKV3MMy2kdWODySKWOhkvSKdeYxURvmuD9A==
      X-Amz-Cf-Pop:
      - JFK52-P10
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704]], "model": "text-embedding-3-large", "encoding_format":
      "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '84'
      content-type:
      - application/json
      cookie:
      - __cf_bm=uPhR1wV.Fmi8zA9RzlF890OM5ACguvBBGZZ.VUMYfuA-1732218866-1.0.1.1-VnlLmUZY6HevHkNK9jDP0hA2U4uqmiqbepis0YKX_BgBCfs262fcXrQ561VUEWvqFSAgGy0Q2lH3itbuhTgrsg;
        _cfuvid=Uss7Ee657AW95jd08vhlVpunQjfw3x52ONG_TIfbpfQ-1732218866901-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        1,\n    \"total_tokens\": 1\n  }\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b873d9a42e9-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:36 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '488'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999999'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_9c397eac43890fb64f3fb9d954534499
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704]], "model": "text-embedding-3-large", "encoding_format":
      "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '84'
      content-type:
      - application/json
      cookie:
      - __cf_bm=uPhR1wV.Fmi8zA9RzlF890OM5ACguvBBGZZ.VUMYfuA-1732218866-1.0.1.1-VnlLmUZY6HevHkNK9jDP0hA2U4uqmiqbepis0YKX_BgBCfs262fcXrQ561VUEWvqFSAgGy0Q2lH3itbuhTgrsg;
        _cfuvid=Uss7Ee657AW95jd08vhlVpunQjfw3x52ONG_TIfbpfQ-1732218866901-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '1'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        1,\n    \"total_tokens\": 1\n  }\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b89c81441de-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:36 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '264'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999998'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_4d34576183445d5c1bcbcdfd8be5cd1e
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704, 374, 279, 6864, 315, 9822, 13]], "model": "text-embedding-3-large",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '115'
      content-type:
      - application/json
      cookie:
      - __cf_bm=uPhR1wV.Fmi8zA9RzlF890OM5ACguvBBGZZ.VUMYfuA-1732218866-1.0.1.1-VnlLmUZY6HevHkNK9jDP0hA2U4uqmiqbepis0YKX_BgBCfs262fcXrQ561VUEWvqFSAgGy0Q2lH3itbuhTgrsg;
        _cfuvid=Uss7Ee657AW95jd08vhlVpunQjfw3x52ONG_TIfbpfQ-1732218866901-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        7,\n    \"total_tokens\": 7\n  }\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b8abac642e9-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:36 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '120'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999993'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_01e2f104205c80cb741154ca2fc27a23
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[60704, 374, 279, 6864, 315, 9822, 13]], "model": "text-embedding-3-large",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '115'
      content-type:
      - application/json
      cookie:
      - __cf_bm=uPhR1wV.Fmi8zA9RzlF890OM5ACguvBBGZZ.VUMYfuA-1732218866-1.0.1.1-VnlLmUZY6HevHkNK9jDP0hA2U4uqmiqbepis0YKX_BgBCfs262fcXrQ561VUEWvqFSAgGy0Q2lH3itbuhTgrsg;
        _cfuvid=Uss7Ee657AW95jd08vhlVpunQjfw3x52ONG_TIfbpfQ-1732218866901-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        7,\n    \"total_tokens\": 7\n  }\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b8beafc41de-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:37 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '181'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999993'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_a90a493a707535db2ab3c7479ba451a6
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a question, an answer, and sentences from
      the answer analyze the complexity of each sentence given under ''sentences''
      and break down each sentence into one or more fully understandable statements
      while also ensuring no pronouns are used in each statement. Format the outputs
      in JSON.\nPlease return the output in a JSON format that complies with the following
      schema as specified in JSON Schema:\n{''$defs'': {''SentenceComponents'': {''properties'':
      {''sentence_index'': {''description'': ''The index of the sentence'', ''title'':
      ''Sentence Index'', ''type'': ''integer''}, ''simpler_statements'': {''description'':
      ''A list of simpler statements that can be directly inferred from the context'',
      ''items'': {''type'': ''string''}, ''title'': ''Simpler Statements'', ''type'':
      ''array''}}, ''required'': [''sentence_index'', ''simpler_statements''], ''title'':
      ''SentenceComponents'', ''type'': ''object''}}, ''properties'': {''sentences'':
      {''description'': ''A list of sentences and their simpler versions'', ''items'':
      {''$ref'': ''#/$defs/SentenceComponents''}, ''title'': ''Sentences'', ''type'':
      ''array''}}, ''required'': [''sentences''], ''title'': ''SentencesSimplified'',
      ''type'': ''object''}\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    \"question\":
      \"Who was Albert Einstein and what is he best known for?\",\n    \"answer\":
      \"He was a German-born theoretical physicist, widely acknowledged to be one
      of the greatest and most influential physicists of all time. He was best known
      for developing the theory of relativity, he also made important contributions
      to the development of the theory of quantum mechanics.\",\n    \"sentences\":
      {\n        \"0\": \"He was a German-born theoretical physicist, widely acknowledged
      to be one of the greatest and most influential physicists of all time.\",\n        \"1\":
      \"He was best known for developing the theory of relativity, he also made important
      contributions to the development of the theory of quantum mechanics.\"\n    }\n}\nOutput:
      {\n    \"sentences\": [\n        {\n            \"sentence_index\": 0,\n            \"simpler_statements\":
      [\n                \"Albert Einstein was a German-born theoretical physicist.\",\n                \"Albert
      Einstein is recognized as one of the greatest and most influential physicists
      of all time.\"\n            ]\n        },\n        {\n            \"sentence_index\":
      1,\n            \"simpler_statements\": [\n                \"Albert Einstein
      was best known for developing the theory of relativity.\",\n                \"Albert
      Einstein also made important contributions to the development of the theory
      of quantum mechanics.\"\n            ]\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"question\": \"What''s
      the capital of France?\",\n    \"answer\": \"Paris is the capital of France.\",\n    \"sentences\":
      {\n        \"0\": \"Paris is the capital of France.\"\n    }\n}\nOutput: ",
      "role": "user"}], "model": "gpt-4o", "n": 1, "stream": false, "temperature":
      1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3011'
      content-type:
      - application/json
      cookie:
      - __cf_bm=omtkn6oOnnBQqB37JIcn9NSBzFPZVrPAgRkKg5JqKMI-1732218872-1.0.1.1-M1KjJY_zKhuorseH0l_eXDvJyO1BMiTGHQ3Aw5CnIOC7f7aEH7ALAegccOSNxgXYiXNCs8ZEf_n4EL27jCu0xg;
        _cfuvid=6hJMVDW0qM2hT5rj0.fdI0f5FWiqbPbvKGNPoFhZJro-1732218872990-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '1'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-AW7Y4cGXtaUO9vHKDFr7Z8M8V7Zm7\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1732218876,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"sentences\\\":
        [\\n        {\\n            \\\"sentence_index\\\": 0,\\n            \\\"simpler_statements\\\":
        [\\n                \\\"Paris is the capital of France.\\\"\\n            ]\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        605,\n    \"completion_tokens\": 45,\n    \"total_tokens\": 650,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"system_fingerprint\":
        \"fp_7f6be3efb0\"\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b8a0af678d3-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:38 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '960'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '1539'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29999281'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_3bbdc9d7246fe4a4223e0b860ac0b8b0
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a question, an answer, and sentences from
      the answer analyze the complexity of each sentence given under ''sentences''
      and break down each sentence into one or more fully understandable statements
      while also ensuring no pronouns are used in each statement. Format the outputs
      in JSON.\nPlease return the output in a JSON format that complies with the following
      schema as specified in JSON Schema:\n{''$defs'': {''SentenceComponents'': {''properties'':
      {''sentence_index'': {''description'': ''The index of the sentence'', ''title'':
      ''Sentence Index'', ''type'': ''integer''}, ''simpler_statements'': {''description'':
      ''A list of simpler statements that can be directly inferred from the context'',
      ''items'': {''type'': ''string''}, ''title'': ''Simpler Statements'', ''type'':
      ''array''}}, ''required'': [''sentence_index'', ''simpler_statements''], ''title'':
      ''SentenceComponents'', ''type'': ''object''}}, ''properties'': {''sentences'':
      {''description'': ''A list of sentences and their simpler versions'', ''items'':
      {''$ref'': ''#/$defs/SentenceComponents''}, ''title'': ''Sentences'', ''type'':
      ''array''}}, ''required'': [''sentences''], ''title'': ''SentencesSimplified'',
      ''type'': ''object''}\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    \"question\":
      \"Who was Albert Einstein and what is he best known for?\",\n    \"answer\":
      \"He was a German-born theoretical physicist, widely acknowledged to be one
      of the greatest and most influential physicists of all time. He was best known
      for developing the theory of relativity, he also made important contributions
      to the development of the theory of quantum mechanics.\",\n    \"sentences\":
      {\n        \"0\": \"He was a German-born theoretical physicist, widely acknowledged
      to be one of the greatest and most influential physicists of all time.\",\n        \"1\":
      \"He was best known for developing the theory of relativity, he also made important
      contributions to the development of the theory of quantum mechanics.\"\n    }\n}\nOutput:
      {\n    \"sentences\": [\n        {\n            \"sentence_index\": 0,\n            \"simpler_statements\":
      [\n                \"Albert Einstein was a German-born theoretical physicist.\",\n                \"Albert
      Einstein is recognized as one of the greatest and most influential physicists
      of all time.\"\n            ]\n        },\n        {\n            \"sentence_index\":
      1,\n            \"simpler_statements\": [\n                \"Albert Einstein
      was best known for developing the theory of relativity.\",\n                \"Albert
      Einstein also made important contributions to the development of the theory
      of quantum mechanics.\"\n            ]\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"question\": \"What''s
      the capital of France?\",\n    \"answer\": \"Paris is the capital of France.\",\n    \"sentences\":
      {\n        \"0\": \"Paris is the capital of France.\"\n    }\n}\nOutput: ",
      "role": "user"}], "model": "gpt-4o", "n": 1, "stream": false, "temperature":
      1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3011'
      content-type:
      - application/json
      cookie:
      - __cf_bm=omtkn6oOnnBQqB37JIcn9NSBzFPZVrPAgRkKg5JqKMI-1732218872-1.0.1.1-M1KjJY_zKhuorseH0l_eXDvJyO1BMiTGHQ3Aw5CnIOC7f7aEH7ALAegccOSNxgXYiXNCs8ZEf_n4EL27jCu0xg;
        _cfuvid=6hJMVDW0qM2hT5rj0.fdI0f5FWiqbPbvKGNPoFhZJro-1732218872990-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '1'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-AW7Y44zFLVmHzRZ1nf3iSIrhwyeYN\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1732218876,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"sentences\\\":
        [\\n        {\\n            \\\"sentence_index\\\": 0,\\n            \\\"simpler_statements\\\":
        [\\n                \\\"Paris is the capital of France.\\\"\\n            ]\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        605,\n    \"completion_tokens\": 45,\n    \"total_tokens\": 650,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"system_fingerprint\":
        \"fp_7f6be3efb0\"\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b8a2e278c06-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:38 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '960'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '1580'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29999281'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_0b751b83651c48e419c33857af40dce6
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\nPlease
      return the output in a JSON format that complies with the following schema as
      specified in JSON Schema:\n{''$defs'': {''StatementFaithfulnessAnswer'': {''properties'':
      {''statement'': {''description'': ''the original statement, word-by-word'',
      ''title'': ''Statement'', ''type'': ''string''}, ''reason'': {''description'':
      ''the reason of the verdict'', ''title'': ''Reason'', ''type'': ''string''},
      ''verdict'': {''description'': ''the verdict(0/1) of the faithfulness.'', ''title'':
      ''Verdict'', ''type'': ''integer''}}, ''required'': [''statement'', ''reason'',
      ''verdict''], ''title'': ''StatementFaithfulnessAnswer'', ''type'': ''object''}},
      ''properties'': {''statements'': {''items'': {''$ref'': ''#/$defs/StatementFaithfulnessAnswer''},
      ''title'': ''Statements'', ''type'': ''array''}}, ''required'': [''statements''],
      ''title'': ''NLIStatementOutput'', ''type'': ''object''}\n\n--------EXAMPLES-----------\nExample
      1\nInput: {\n    \"context\": \"John is a student at XYZ University. He is pursuing
      a degree in Computer Science. He is enrolled in several courses this semester,
      including Data Structures, Algorithms, and Database Management. John is a diligent
      student and spends a significant amount of time studying and completing assignments.
      He often stays late in the library to work on his projects.\",\n    \"statements\":
      [\n        \"John is majoring in Biology.\",\n        \"John is taking a course
      on Artificial Intelligence.\",\n        \"John is a dedicated student.\",\n        \"John
      has a part-time job.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"John is majoring in Biology.\",\n            \"reason\": \"John''s major is
      explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is taking a course on Artificial Intelligence.\",\n            \"reason\":
      \"The context mentions the courses John is currently enrolled in, and Artificial
      Intelligence is not mentioned. Therefore, it cannot be deduced that John is
      taking a course on AI.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is a dedicated student.\",\n            \"reason\": \"The context states
      that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\",\n            \"verdict\": 1\n        },\n        {\n            \"statement\":
      \"John has a part-time job.\",\n            \"reason\": \"There is no information
      given in the context about John having a part-time job.\",\n            \"verdict\":
      0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    \"context\": \"Photosynthesis
      is a process used by plants, algae, and certain bacteria to convert light energy
      into chemical energy.\",\n    \"statements\": [\n        \"Albert Einstein was
      a genius.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"Albert Einstein was a genius.\",\n            \"reason\": \"The context and
      statement are unrelated\",\n            \"verdict\": 0\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"context\": \"Paris
      is the capital and most populous city of France.\",\n    \"statements\": [\n        \"Paris
      is the capital of France.\"\n    ]\n}\nOutput: ", "role": "user"}], "model":
      "gpt-4o", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3796'
      content-type:
      - application/json
      cookie:
      - __cf_bm=omtkn6oOnnBQqB37JIcn9NSBzFPZVrPAgRkKg5JqKMI-1732218872-1.0.1.1-M1KjJY_zKhuorseH0l_eXDvJyO1BMiTGHQ3Aw5CnIOC7f7aEH7ALAegccOSNxgXYiXNCs8ZEf_n4EL27jCu0xg;
        _cfuvid=6hJMVDW0qM2hT5rj0.fdI0f5FWiqbPbvKGNPoFhZJro-1732218872990-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-AW7Y69g77hCdGHJomeAuUF0nDLao1\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1732218878,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        {\\n            \\\"statement\\\": \\\"Paris is the capital of
        France.\\\",\\n            \\\"reason\\\": \\\"The context explicitly states
        that Paris is the capital of France.\\\",\\n            \\\"verdict\\\": 1\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        786,\n    \"completion_tokens\": 55,\n    \"total_tokens\": 841,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"system_fingerprint\":
        \"fp_831e067d82\"\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b94b98078d3-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:39 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '1008'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '1211'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29999098'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_bfc55b27f054d34415ff8fc1e089ba17
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\nPlease
      return the output in a JSON format that complies with the following schema as
      specified in JSON Schema:\n{''$defs'': {''StatementFaithfulnessAnswer'': {''properties'':
      {''statement'': {''description'': ''the original statement, word-by-word'',
      ''title'': ''Statement'', ''type'': ''string''}, ''reason'': {''description'':
      ''the reason of the verdict'', ''title'': ''Reason'', ''type'': ''string''},
      ''verdict'': {''description'': ''the verdict(0/1) of the faithfulness.'', ''title'':
      ''Verdict'', ''type'': ''integer''}}, ''required'': [''statement'', ''reason'',
      ''verdict''], ''title'': ''StatementFaithfulnessAnswer'', ''type'': ''object''}},
      ''properties'': {''statements'': {''items'': {''$ref'': ''#/$defs/StatementFaithfulnessAnswer''},
      ''title'': ''Statements'', ''type'': ''array''}}, ''required'': [''statements''],
      ''title'': ''NLIStatementOutput'', ''type'': ''object''}\n\n--------EXAMPLES-----------\nExample
      1\nInput: {\n    \"context\": \"John is a student at XYZ University. He is pursuing
      a degree in Computer Science. He is enrolled in several courses this semester,
      including Data Structures, Algorithms, and Database Management. John is a diligent
      student and spends a significant amount of time studying and completing assignments.
      He often stays late in the library to work on his projects.\",\n    \"statements\":
      [\n        \"John is majoring in Biology.\",\n        \"John is taking a course
      on Artificial Intelligence.\",\n        \"John is a dedicated student.\",\n        \"John
      has a part-time job.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"John is majoring in Biology.\",\n            \"reason\": \"John''s major is
      explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is taking a course on Artificial Intelligence.\",\n            \"reason\":
      \"The context mentions the courses John is currently enrolled in, and Artificial
      Intelligence is not mentioned. Therefore, it cannot be deduced that John is
      taking a course on AI.\",\n            \"verdict\": 0\n        },\n        {\n            \"statement\":
      \"John is a dedicated student.\",\n            \"reason\": \"The context states
      that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\",\n            \"verdict\": 1\n        },\n        {\n            \"statement\":
      \"John has a part-time job.\",\n            \"reason\": \"There is no information
      given in the context about John having a part-time job.\",\n            \"verdict\":
      0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    \"context\": \"Photosynthesis
      is a process used by plants, algae, and certain bacteria to convert light energy
      into chemical energy.\",\n    \"statements\": [\n        \"Albert Einstein was
      a genius.\"\n    ]\n}\nOutput: {\n    \"statements\": [\n        {\n            \"statement\":
      \"Albert Einstein was a genius.\",\n            \"reason\": \"The context and
      statement are unrelated\",\n            \"verdict\": 0\n        }\n    ]\n}\n-----------------------------\n\nNow
      perform the same with the following input\ninput: {\n    \"context\": \"Paris
      is the capital and most populous city of France.\",\n    \"statements\": [\n        \"Paris
      is the capital of France.\"\n    ]\n}\nOutput: ", "role": "user"}], "model":
      "gpt-4o", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3796'
      content-type:
      - application/json
      cookie:
      - __cf_bm=omtkn6oOnnBQqB37JIcn9NSBzFPZVrPAgRkKg5JqKMI-1732218872-1.0.1.1-M1KjJY_zKhuorseH0l_eXDvJyO1BMiTGHQ3Aw5CnIOC7f7aEH7ALAegccOSNxgXYiXNCs8ZEf_n4EL27jCu0xg;
        _cfuvid=6hJMVDW0qM2hT5rj0.fdI0f5FWiqbPbvKGNPoFhZJro-1732218872990-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 1.55.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.55.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"chatcmpl-AW7Y6oJFJcH15FeW09feLhA2bJdP7\",\n  \"object\":
        \"chat.completion\",\n  \"created\": 1732218878,\n  \"model\": \"gpt-4o-2024-08-06\",\n
        \ \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\":
        \"assistant\",\n        \"content\": \"```json\\n{\\n    \\\"statements\\\":
        [\\n        {\\n            \\\"statement\\\": \\\"Paris is the capital of
        France.\\\",\\n            \\\"reason\\\": \\\"The context explicitly states
        that Paris is the capital of France.\\\",\\n            \\\"verdict\\\": 1\\n
        \       }\\n    ]\\n}\\n```\",\n        \"refusal\": null\n      },\n      \"logprobs\":
        null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        786,\n    \"completion_tokens\": 55,\n    \"total_tokens\": 841,\n    \"prompt_tokens_details\":
        {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\":
        {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\":
        0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"system_fingerprint\":
        \"fp_831e067d82\"\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e633b94bda68c06-EWR
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 21 Nov 2024 19:54:39 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '1008'
      openai-organization:
      - not-diamond-bdz8cg
      openai-processing-ms:
      - '1206'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29999098'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_f46e0e402e4799fedbfa6bc52afd7f9e
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluation", "user_id": "a-ea5f51235ac34721951129d4d99e6ae7",
      "metrics": ["faithfulness", "semantic_similarity"], "evaluation_mode": "", "num_rows":
      2, "language": "english", "in_ci": false}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '206'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 21 Nov 2024 19:54:39 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 dd795f2b5d3927d5f5c03f5e72cd09ac.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - RdFwePPFh3J1uWDBoNWWfMGDp8oGMUyxG3wLchuCbJETCMrFaCjPgg==
      X-Amz-Cf-Pop:
      - JFK52-P10
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-ea5f51235ac34721951129d4d99e6ae7",
      "is_completed": true}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '97'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 21 Nov 2024 19:54:39 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 911e28435e9a834f6bc712f4907c4312.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - NXB0NfODgiPVP10XtWk6AN0ha1a--s2fYwd7Y1SoVkZPT00O49Hnaw==
      X-Amz-Cf-Pop:
      - JFK52-P10
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"event_type": "evaluate", "user_id": "a-ea5f51235ac34721951129d4d99e6ae7",
      "is_completed": true}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '97'
      Content-Type:
      - application/json
      User-Agent:
      - python-requests/2.32.3
    method: POST
    uri: https://t.explodinggradients.com/
  response:
    body:
      string: '{"status":"ok"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '15'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 21 Nov 2024 19:54:39 GMT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Caddy
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Origin
      Via:
      - 1.1 1d09c1b75a19bca5156cd91feff6b48c.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - 2WPnVFETsacwaLeNsLFmIForPDUivYx863QkD0zNIDuwxv36AJaGHw==
      X-Amz-Cf-Pop:
      - JFK52-P10
      X-Backend-Id:
      - jitsu-edge-1
      X-Cache:
      - Miss from cloudfront
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
version: 1
